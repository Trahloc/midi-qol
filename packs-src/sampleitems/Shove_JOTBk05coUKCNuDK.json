{
  "name": "Shove",
  "type": "feat",
  "img": "icons/skills/melee/unarmed-punch-fist-white.webp",
  "system": {
    "description": {
      "value": "<p><em>This feature is safe to rename.</em></p><p>midi-qol: 11.0.7</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": "",
      "units": ""
    },
    "cover": null,
    "crewed": false,
    "target": {
      "value": 1,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "touch"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": null,
      "recovery": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": "",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "type": {
      "value": "",
      "subtype": ""
    },
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": false
    }
  },
  "effects": [],
  "flags": {
    "custom-character-sheet-sections": {
      "sectionName": "Generic Actions"
    },
    "rest-recovery": {
      "data": {
        "recovery": {
          "enabled": false
        }
      }
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "rollAttackPerTarget": "default",
      "itemCondition": "",
      "effectCondition": ""
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "autoFailFriendly": false,
      "autoSaveFriendly": false,
      "rollOther": false,
      "critOther": false,
      "offHandWeapon": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false,
      "ignoreTotalCover": false,
      "confirmTargets": "never",
      "noConcentrationCheck": false
    },
    "core": {},
    "cf": {
      "id": null
    },
    "itemacro": {
      "macro": {
        "name": "Shove",
        "type": "script",
        "scope": "global",
        "command": "try {\n    async function success(sourceToken, targetToken, results) {\n    d = new Dialog({\n        title: `${item.name} ${game.i18n.localize(\"midi-qol.save-success\")}`,\n        content: \"what do you want to do?\",\n        buttons: {\n                        move: {\n                icon: '<image src=\"icons/svg/direction.svg\" width=\"30\" height=\"30\" style=\"border:0px\">',\n                label: \"Move\",\n                callback: () => {MidiQOL.moveTokenAwayFromPoint(targetToken, 5, sourceToken.center)}\n            },\n            prone: {\n                icon: '<image src=\"icons/svg/falling.svg\" width=\"30\" height=\"30\" style=\"border:0px\">',\n                label: `${game.i18n.localize(\"EFFECT.StatusProne\")}`,\n                callback: () => {\n                    if (MidiQOL.hasCondition(targetToken, \"Prone\")) return;\n                    let se = CONFIG.statusEffects.find(i => { // This will find a convenient effect\n                            if (i.statuses instanceof Set) return i.statuses.has(\"prone\");\n                            return i.statuses?.find(s => s === \"prone\")\n                        });\n                        \n                    if (!se) se = CONFIG.statusEffects.find(i => i.id === \"prone\"); // get the default status effect\n                    targetToken.toggleEffect(se, {active: true});\n                }\n            }\n\n        },\n        default: \"move\"\n    })\n    d.render(true);\n}\n\n\nif (!token) token = MidiQOL.tokenForActor(actor);\nif (!token) {\n    ui.notifications.warn(`${actor.name} does not have a token on the canvas`)\n    return;\n}\nlet target = workflow.targets?.first();\nif (!target ) {\n    ui.Notificatons.warn(`${item.name} must have a token targeted`)\n    return;\n}\nconst tokenSize = token.actor.system.traits.size;\nconst targetSize = target.actor.system.traits.size;\nconst tokenSizeNum = Object.keys(CONFIG.DND5E.actorSizes).indexOf(tokenSize);\nconst targetSizeNum = Object.keys(CONFIG.DND5E.actorSizes).indexOf(targetSize); \nif (targetSizeNum - tokenSizeNum > 1) {\n    ui.notifications.warn(`${item.name} creature size difference too great ${token.name}:${CONFIG.DND5E.actorSizes[tokenSize]} vs ${target.name}:${CONFIG.DND5E.actorSizes[targetSize]}`)\n    return;\n}\nconst targetSkill = target.actor.system.skills.ath.total > target.actor.system.skills.acr.total ? \"ath\" : \"acr\";\nawait MidiQOL.contestedRoll({\n    source: {token, rollType: \"skill\", ability: \"Acrobatics\"},\n    target: {token: target, rollType: \"skill\", ability: targetSkill},\n    flavor: item.name, success: success.bind(this, token, target), displayResults: true, itemCardId: workflow.itemCardId, \n    rollOptions: {fastForward: false, chatMessage: true, rollMode: \"gmroll\"}\n});\n} catch (err) {\n    console.error(`${item.name} 11.0.7 item macro error`, err)\n}\n// A fun variant if the roll fails turn the tables and have the attacker pushed back/made prone\n/*\nawait MidiQOL.contestedRoll({\n    source: {token, rollType: \"skill\", ability: \"Acrobatics\"},\n    target: {token: target, rollType: \"skill\", ability: targetSkill},\n    flavor: item.name, success: success.bind(this, token, target), failure: success.bind(this, target, token) displayResults: true, itemCardId: workflow.itemCardId, \n    rollOptions: {fastForward: false, chatMessage: true}\n});\n*/",
        "author": "ffUVCzLexh57kZfU",
        "_id": null,
        "img": "icons/svg/dice-target.svg",
        "folder": null,
        "sort": 0,
        "ownership": {
          "default": 0
        },
        "flags": {},
        "_stats": {
          "systemId": null,
          "systemVersion": null,
          "coreVersion": null,
          "createdTime": null,
          "modifiedTime": null,
          "lastModifiedBy": null
        }
      }
    }
  },
  "_stats": {
    "systemId": "dnd5e",
    "systemVersion": "3.2.1",
    "coreVersion": "12.327",
    "createdTime": 1683515482996,
    "modifiedTime": 1719452586976,
    "lastModifiedBy": "STcmc1QZ0hx024Tl",
    "compendiumSource": null,
    "duplicateSource": null
  },
  "folder": "DwSEDbDH7DaZq1Oa",
  "_id": "JOTBk05coUKCNuDK",
  "sort": 0,
  "ownership": {
    "default": 0,
    "ffUVCzLexh57kZfU": 3
  },
  "_key": "!items!JOTBk05coUKCNuDK"
}
