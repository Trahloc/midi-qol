{
  "name": "Lay on Hands 10.0.10",
  "type": "feat",
  "img": "icons/magic/light/orbs-hand-gray.webp",
  "effects": [
    {
      "_id": "hbyjgntb6xcq8klo",
      "changes": [
        {
          "key": "system.resources.primary.max",
          "mode": 5,
          "value": "5 * @classes.paladin.levels",
          "priority": 20
        },
        {
          "key": "system.resources.primary.label",
          "mode": 5,
          "value": "Lay on Hands Pool",
          "priority": 20
        },
        {
          "key": "system.resources.primary.lr",
          "mode": 5,
          "value": "1",
          "priority": 20
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null,
        "seconds": null,
        "combat": null,
        "rounds": null,
        "turns": null,
        "startRound": null,
        "startTurn": null
      },
      "origin": "Actor.iO04pmtZ0N3gTAk9.Item.IM2UCUasJLD5J7Fw",
      "transfer": true,
      "flags": {
        "core": {
          "statusId": ""
        },
        "dae": {
          "stackable": "none",
          "durationExpression": "",
          "macroRepeat": "none",
          "specialDuration": [],
          "transfer": true
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "displayTemp": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "tint": "#ffffff",
      "name": "Lay on Hands Pool",
      "description": "",
      "statuses": [],
      "_stats": {
        "coreVersion": "12.327",
        "systemId": null,
        "systemVersion": null,
        "createdTime": null,
        "modifiedTime": null,
        "lastModifiedBy": null,
        "compendiumSource": null,
        "duplicateSource": null
      },
      "img": "icons/magic/light/orbs-hand-gray.webp",
      "type": "base",
      "system": {},
      "sort": 0,
      "_key": "!items.effects!YMc9WAanqzJUp1Dq.hbyjgntb6xcq8klo"
    }
  ],
  "flags": {
    "_sheetTab": "description",
    "entityorder": {
      "order": 161
    },
    "dynamiceffects": {
      "effects": [],
      "alwaysActive": false,
      "equipActive": false
    },
    "favtab": {
      "isFavourite": true,
      "isFavorite": true
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[preItemRoll]ItemMacro"
    },
    "midiProperties": {
      "nodam": false,
      "halfdam": false,
      "fulldam": false,
      "rollOther": false,
      "critOther": false,
      "concentration": false,
      "magicdam": false,
      "magiceffect": false,
      "toggleEffect": false,
      "autoFailFriendly": false,
      "autoSaveFriendly": false,
      "offHandWeapon": false,
      "ignoreTotalCover": false
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Lay on Hands",
          "type": "script",
          "author": "devnIbfBHb74U9Zv",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const version = \"0.9.52\";\ntry {\n    if (args[0].macroPass === \"preItemRoll\") {\n      const theTarget = args[0].targets[0];\n      if (!theTarget) return false;\n    \n      // does not work on undead/constructs\n      let invalid = [\"undead\", \"construct\"].some(type => (theTarget?.actor.data.data.details.type?.value || \"\").toLowerCase().includes(type));\n      if (invalid) {\n          ui.notifications.warn(\"Lay on Hands can't affect undead/constructs\")\n          return false;\n      }\n      let consumeTarget = args[0].itemData.data.consume.target;\n      if (!consumeTarget || consumeTarget === \"\") consumeTarget = 'resources.primary.value'; \n      const available = getProperty(actor.data.data, consumeTarget);\n      // Have we got any left?\n      if (available <= 0) return false;\n    \n      // prompt for how much to use...\n      let d = new Promise((resolve, reject) => {\n        let theDialog = new Dialog({\n          title: \"Lay on Hands\",\n          content: `How many points to use? ${available} available<input id=\"mqlohpoints\" type=\"number\" min=\"0\" step=\"1.0\" max=\"${available}\"></input>`,\n          buttons: {\n            heal: {\n              label: \"Heal\",\n              callback: (html) => { resolve(Math.clamped(Math.floor(Number(html.find('#mqlohpoints')[0].value)), 0, available)); }\n            },\n            cureDiseasePoison: {\n              label: \"Disease/Poison\",\n              callback: (html) => { resolve(-Math.clamped(Math.floor(Number(html.find('#mqlohpoints')[0].value) / 5) * 5, 0, available)); }\n            },\n            abort: {\n              icon: '<i class=\"fas fa-cross\"></i>',\n              label: \"Quit\",\n              callback: () => { resolve(false) }\n            },\n          },\n          default: \"heal\",\n        }).render(true);\n      });\n      const consumed = await d;\n      if (!consumed) return false;\n      const workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\n      const theItem = workflow.item;\n      let updates;\n      if (consumed > 0) {\n        updates = {\n          \"data.consume.amount\": Math.abs(consumed),\n          \"data.damage.parts\": [[`${Math.max(0, consumed)}`, \"healing\"]],\n          \"data.chatFlavor\": \"\",\n          \"data.consume.target\": consumeTarget\n        };\n      } else {\n        updates = {\n          \"data.consume.amount\": Math.abs(consumed),\n          \"data.damage.parts\": [],\n          \"data.chatFlavor\": `<h3>Remove up to ${Math.floor(Math.abs(consumed) / 5)} poisons/diseases</h3>`,\n          \"data.consume.target\": consumeTarget\n        };\n      }\n      setProperty(workflow, \"workflowOptions.autoConsumeResource\", true);\n      return theItem.update(updates);\n    }\n    return true;\n} catch (err)  {\n    console.error(`${args[0].itemData.name} - Lay on Hands ${version}`, err);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        },
        "name": "Lay on Hands 10.0.10",
        "type": "script",
        "img": "icons/svg/dice-target.svg",
        "scope": "global",
        "command": "const version = \"10.0.10\";\ntry {\n    if (args[0].macroPass === \"preItemRoll\") {\n      const theTarget = args[0].targets[0];\n      if (!theTarget) return false;\n    \n      // does not work on undead/constructs\n      let invalid = [\"undead\", \"construct\"].some(type => (theTarget?.actor.system.details.type?.value || \"\").toLowerCase().includes(type));\n      if (invalid) {\n          ui.notifications.warn(\"Lay on Hands can't affect undead/constructs\")\n          return false;\n      }\n      let consumeTarget = args[0].itemData.system.consume.target;\n      if (!consumeTarget || consumeTarget === \"\") consumeTarget = 'resources.primary.value'; \n      const available = getProperty(actor.system, consumeTarget);\n      // Have we got any left?\n      if (available <= 0) return false;\n    \n      // prompt for how much to use...\n      let d = new Promise((resolve, reject) => {\n        let theDialog = new Dialog({\n          title: \"Lay on Hands\",\n          content: `How many points to use? ${available} available<input id=\"mqlohpoints\" type=\"number\" min=\"0\" step=\"1.0\" max=\"${available}\"></input>`,\n          buttons: {\n            heal: {\n              label: \"Heal\",\n              callback: (html) => { resolve(Math.clamped(Math.floor(Number(html.find('#mqlohpoints')[0].value)), 0, available)); }\n            },\n            cureDiseasePoison: {\n              label: \"Disease/Poison\",\n              callback: (html) => { resolve(-Math.clamped(Math.floor(Number(html.find('#mqlohpoints')[0].value) / 5) * 5, 0, available)); }\n            },\n            abort: {\n              icon: '<i class=\"fas fa-cross\"></i>',\n              label: \"Quit\",\n              callback: () => { resolve(false) }\n            },\n          },\n          default: \"heal\",\n        }).render(true);\n      });\n      const consumed = await d;\n      if (!consumed) return false;\n      const workflow = MidiQOL.Workflow.getWorkflow(args[0].uuid);\n      const theItem = workflow.item;\n      let updates;\n      if (consumed > 0) {\n        updates = {\n          \"system.consume.amount\": Math.abs(consumed),\n          \"system.damage.parts\": [[`${Math.max(0, consumed)}`, \"healing\"]],\n          \"system.chatFlavor\": \"\",\n          \"system.consume.target\": consumeTarget\n        };\n      } else {\n        updates = {\n          \"system.consume.amount\": Math.abs(consumed),\n          \"system.damage.parts\": [],\n          \"system.chatFlavor\": `<h3>Remove up to ${Math.floor(Math.abs(consumed) / 5)} poisons/diseases</h3>`,\n          \"system.consume.target\": consumeTarget\n        };\n      }\n      setProperty(workflow, \"workflowOptions.autoConsumeResource\", true);\n      return theItem.update(updates);\n    }\n    return true;\n} catch (err)  {\n    console.error(`${args[0].itemData.name} - Lay on Hands ${version}`, err);\n}",
        "sort": 0,
        "ownership": {
          "default": 0
        },
        "flags": {},
        "_stats": {
          "systemId": null,
          "systemVersion": null,
          "coreVersion": null,
          "createdTime": null,
          "modifiedTime": null,
          "lastModifiedBy": null
        }
      }
    },
    "core": {
      "sourceId": "Item.IM2UCUasJLD5J7Fw"
    },
    "scene-packer": {
      "sourceId": "Item.aGfO0Wkxr0QYfOSJ",
      "hash": "6705c1d4f10459da0d62b2b06b023a246d9ed5bd"
    },
    "cf": {
      "id": "temp_qt0kn9os0vl"
    }
  },
  "system": {
    "description": {
      "value": "<p>Your blessed touch can heal wounds. You have a pool of healing power that replenishes when you take a long rest. With that pool, you can restore a total number of hit points equal to your paladin level × 5. </p>\n<p>As an action, you can touch a creature and draw power from the pool to restore a number of hit points to that creature, up to the maximum amount remaining in your pool.</p>\n<p>Alternatively, you can expend 5 hit points from your pool of healing to cure the target of one disease or neutralize one poison affecting it. You can cure multiple diseases and neutralize multiple poisons with a single use of Lay on Hands, expending hit points separately for each one.</p>\n<p>This feature has no effect on undead and constructs.<br /><br />Midi-qol notes: <br />Item has a passive effect to set the Lay on Hands resource pool to be 5 * the paladin level, default primary resource pool. <br /><br />When first equipped you <span style=\"text-decoration:underline\"><strong>must edit</strong></span> the Item and the resource consumption should be set the set to consume from the primary (default)  resource pool.<br /><br />You can change the resource pool by editing the passive effect and updating the item.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": "",
      "units": ""
    },
    "cover": null,
    "crewed": false,
    "target": {
      "value": 1,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": null,
      "max": "",
      "per": null,
      "recovery": ""
    },
    "consume": {
      "type": "attribute",
      "target": "",
      "amount": 65
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": "",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [
        [
          "65",
          "healing"
        ]
      ],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "type": {
      "value": "",
      "subtype": ""
    },
    "requirements": "Paladin 1",
    "recharge": {
      "value": null,
      "charged": false
    }
  },
  "_stats": {
    "systemId": "dnd5e",
    "systemVersion": "2.2.2",
    "coreVersion": "12.327",
    "createdTime": 1661995926160,
    "modifiedTime": 1691727920101,
    "lastModifiedBy": "ffUVCzLexh57kZfU",
    "compendiumSource": "Item.IM2UCUasJLD5J7Fw",
    "duplicateSource": null
  },
  "folder": "HZNnxQwiyl5E1X6W",
  "sort": 2200000,
  "ownership": {
    "default": 0,
    "devnIbfBHb74U9Zv": 3,
    "ffUVCzLexh57kZfU": 3
  },
  "_id": "YMc9WAanqzJUp1Dq",
  "_key": "!items!YMc9WAanqzJUp1Dq"
}
