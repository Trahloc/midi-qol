{
  "name": "Spirit Guardians",
  "type": "spell",
  "img": "icons/magic/defensive/shield-barrier-blades-teal.webp",
  "effects": [
    {
      "name": "Spirit Guardians",
      "origin": "Actor.7K0JdvsOVu9qX0Sc.Item.7HWCUcuhyH1C9kfN",
      "duration": {
        "startTime": null,
        "seconds": null,
        "combat": null,
        "rounds": null,
        "turns": null,
        "startRound": null,
        "startTurn": null
      },
      "transfer": false,
      "disabled": false,
      "_id": "ukZtJI8A3f86pZf0",
      "changes": [
        {
          "key": "system.attributes.movement.all",
          "mode": 0,
          "value": "/2",
          "priority": 20
        }
      ],
      "description": "",
      "statuses": [],
      "flags": {
        "times-up": {
          "isPassive": false
        },
        "dae": {
          "selfTarget": false,
          "selfTargetAlways": false,
          "dontApply": true,
          "stackable": "multi",
          "showIcon": true,
          "durationExpression": "",
          "macroRepeat": "none",
          "specialDuration": []
        }
      },
      "tint": "#ffffff",
      "_stats": {
        "coreVersion": "12.327",
        "systemId": null,
        "systemVersion": null,
        "createdTime": null,
        "modifiedTime": null,
        "lastModifiedBy": null,
        "compendiumSource": null,
        "duplicateSource": null
      },
      "img": "icons/magic/defensive/shield-barrier-blades-teal.webp",
      "type": "base",
      "system": {},
      "sort": 0,
      "_key": "!items.effects!WSvktG0CBa6VoITw.ukZtJI8A3f86pZf0"
    }
  ],
  "folder": "03xh8o98NV0wViRp",
  "flags": {
    "ddbimporter": {
      "id": 138784,
      "definitionId": 2264,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "originalName": "Spirit Guardians",
      "sources": [
        {
          "sourceId": 1,
          "pageNumber": null,
          "sourceType": 2
        },
        {
          "sourceId": 2,
          "pageNumber": 278,
          "sourceType": 1
        }
      ],
      "tags": [
        "Damage",
        "Control"
      ],
      "version": "2.9.30"
    },
    "midi-qol": {
      "onUseMacroName": "[preTargeting]ItemMacro",
      "effectActivation": true,
      "forceCEOff": true,
      "forceCEOn": false
    },
    "core": {},
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Spirit Guardians",
          "type": "script",
          "author": "devnIbfBHb74U9Zv",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const lastArg = args[args.length -1];\n  // Check when applying the effect - if the token is not the caster and it IS the tokens turn they take damage\n  if (args[0] === \"on\" && args[1] !== lastArg.tokenId && lastArg.tokenId === game.combat?.current.tokenId) {\n    const sourceItem = await fromUuid(lastArg.origin);\n    let theActor = await fromUuid(lastArg.actorUuid);\n    if (theActor.actor) theActor = theActor.actor;\n    const itemData = mergeObject(duplicate(sourceItem.data), {\n        type: \"weapon\",\n        effects: [],\n        flags: {\n            \"midi-qol\": {\n                noProvokeReaction: true, // no reactions triggered\n                onUseMacroName: null // \n            },\n        },\n        data: {\n            actionType: \"save\",\n            save: {dc: Number.parseInt(args[3]), ability: \"wis\", scaling: \"flat\"},\n            damage: { parts: [[`${args[2]}d8`, \"radiant\"]] },\n            \"target.type\": \"self\",\n            components: {concentration: false, material: false, ritual: false, somatic: false, value: \"\", vocal: false},\n            duration: {units: \"inst\", value: undefined},\n            weaponType: \"improv\"\n        }\n    }, {overwrite: true, inlace: true, insertKeys: true, insertValues: true});\n    itemData.data.target.type = \"self\";\n    setProperty(itemData.flags, \"autoanimations.killAnim\", true);\n    const item = new CONFIG.Item.documentClass(itemData, { parent: theActor })\n    const options = { showFullCard: false, createWorkflow: true, versatile: false, configureDialog: false };\n    await MidiQOL.completeItemRoll(item, options);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        },
        "name": "Spirit Guardians",
        "type": "script",
        "scope": "global",
        "command": "let proceed = true;\nif (!game.modules.get(\"templatemacro\")?.active) {\n  ui.notifications.error(\"Spirit Guardians requires template macro to operate\");\n  proceed = false;\n}\n\nif (game.modules.get(\"walledtemplates\")?.active && game.settings.get(\"walledtemplates\", \"autotarget-menu\") !== \"yes\") {\n  ui.notifications.error(\"Spirit Guardians requires walled templates to be active and auto target set to always\");\n  proceed = false;\n}\nreturn proceed",
        "author": "ffUVCzLexh57kZfU",
        "ownership": {
          "default": 3
        },
        "flags": {},
        "_id": null,
        "img": "icons/svg/dice-target.svg",
        "folder": null,
        "sort": 0,
        "_stats": {
          "systemId": null,
          "systemVersion": null,
          "coreVersion": null,
          "createdTime": null,
          "modifiedTime": null,
          "lastModifiedBy": null
        }
      }
    },
    "betterRolls5e": {
      "quickDamage": {
        "context": [
          ""
        ],
        "value": {
          "0": true,
          "1": true
        },
        "altValue": {
          "0": true,
          "1": true
        }
      },
      "quickOther": {
        "context": "",
        "value": true,
        "altValue": true
      },
      "quickDesc": {
        "value": true,
        "altValue": true
      },
      "quickSave": {
        "value": true,
        "altValue": true
      },
      "quickProperties": {
        "value": true,
        "altValue": true
      },
      "quickVersatile": {
        "value": false,
        "altValue": false
      },
      "quickTemplate": {
        "value": true,
        "altValue": true
      },
      "quickFlavor": {
        "value": true,
        "altValue": true
      }
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false,
      "autoFailFriendly": false,
      "autoSaveFriendly": false,
      "offHandWeapon": false,
      "ignoreTotalCover": false
    },
    "exportSource": {
      "world": "torturous-path-from-phandalin",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.5.7"
    },
    "scene-packer": {
      "hash": "a9a2828835e6777c782119e578fcefec3b834137",
      "sourceId": "Compendium.world.backup-sample-items.Item.C6SYWTjvAhLahOhM"
    },
    "walledtemplates": {
      "wallsBlock": "globalDefault",
      "wallRestriction": "globalDefault",
      "attachToken": "caster"
    },
    "templatemacro": {
      "whenCreated": {
        "asGM": false,
        "command": "const itemUuid = getProperty(template, \"flags.midi-qol.itemUuid\");\nconst item = fromUuidSync(itemUuid);\nconst api = game.modules.get(\"templatemacro\").api;\n\n// Allow selection of tokens that are immune to the effects\nawait MidiQOL.resolveLateTargeting(item, {title: \"Preselect Immune Tokens\", forceDisplay: true, clearWorkflowTargets: false});\nconst preSelectedTargets = Array.from(game.user.targets).map(token => token.id);\nif (!token) token = MidiQOL.tokenForActor(item.parent);\nif (!preSelectedTargets.includes(token.id)) preSelectedTargets.push(token.id)\n\n// seems to take a while to settle down\nawait new Promise(resolve => setTimeout(resolve,250));\n\nlet targets;\n// find token covered by the template\nconst theTemplate = fromUuidSync(template.uuid);\nif (game.modules.get(\"walledtemplates\")?.active)\n  targets = theTemplate.object.targetsWithinShape().map(t => t.id);\nelse \n  targets = api.findContained(theTemplate);\n\ntargets = targets.filter(tid => !preSelectedTargets.includes(tid));\ntargets = targets.filter(tid => MidiQOL.isTargetable(canvas.scene.tokens.get(tid)));\nawait theTemplate.setFlag(\"midi-qol\", \"targets\", targets);\nawait theTemplate.setFlag(\"midi-qol\", \"preSelectedTargets\", preSelectedTargets);\n\n// record the spell level that Spirit Guardians was cast with\nconst workflow = MidiQOL.Workflow.getWorkflow(itemUuid); // fetch the cast spell level\nawait template.setFlag(\"midi-qol\", \"spellLevel\", workflow.itemLevel);\n\n// Apply effects to tokens withing the template\nawait theTemplate.callMacro(\"never\", {template: theTemplate, action: \"doEffects\", targetsToAdd: targets, userId: game.user.id});\n"
      },
      "whenDeleted": {
        "asGM": false,
        "command": "// Remove effects from all targets affected by the template\nconst theItem = await fromUuid(template.flags[\"midi-qol\"].itemUuid);\nawait template.callMacro(\"never\", {template, action: \"doEffects\", targetsToRemove: template.getFlag(\"midi-qol\", \"targets\") ?? [], userId: game.user.id});"
      },
      "never": {
        "asGM": false,
        "command": "let { action, targetsToAdd, targetsToRemove, targetsToAttack, template } = this;\nconst preSelected = getProperty(template, \"flags.midi-qol.preSelectedTargets\") ?? [];\nconst theItem = await fromUuid(template.flags[\"midi-qol\"].itemUuid);\nlet targetTokens;\n\nswitch (action) {\n    case \"doEffects\":\n        targetTokens = (targetsToAdd ?? [])\n            .filter(tid => !preSelected.includes(tid))\n            .map(id => canvas.scene.tokens.get(id))\n            .filter(t => t)\n        if (targetTokens?.length > 0) await DAE.doEffects(theItem, true, targetTokens, { applyAll: true, selfEffects: \"none\", whisper: false });\n        targetTokens = (targetsToRemove ?? [])\n            .filter(tid => !preSelected.includes(tid))\n            .map(id => canvas.scene.tokens.get(id))\n            .filter(t => t);\n        if (targetTokens?.length > 0) DAE.deleteItemActiveEffects(targetTokens, theItem.uuid, [], [], false);\n        break;\n    case \"doAttack\":\n        const actor = theItem.parent;\n        let damageType = \"radiant\";\n        const alignment = actor.system.details.alignment.toLocaleLowerCase();\n        if (alignment.includes(\"evil\")) damageType = \"necrotic\";\n        const spellLevel = template.getFlag(\"midi-qol\", \"spellLevel\");\n\n        // create an item to do the damage, use the spirit guardians item and change everything that matters\n        const itemData = mergeObject(theItem.toObject(), {\n            system: {\n                damage: { parts: [[\"3d8\", damageType]] },\n                save: { ability: \"wis\", scale: \"spell\" },\n                components: {concentration: false},\n                target: {type: \"creature\", units: null, value: null},\n                range: {units: undefined},\n            }\n        });\n        const attackingItem = new CONFIG.Item.documentClass(itemData, { parent: theItem.parent });\n        attackingItem.prepareData();\n        attackingItem.prepareFinalAttributes();\n        const targetUuids = targetsToAttack.map(tid => canvas.scene.tokens.get(tid).uuid)\n\n        // specifying both the level and don't consume the spell slot causes the item to be rolled with the correct spell scaling\n        await MidiQOL.completeItemUse(\n          attackingItem, \n          {consumeSpellSlot: false, needsConfiguration: false, consumeSpellLevel: spellLevel}, \n          { targetUuids, workflowOptions: {lateTargeting: \"none\"}, \n        });\n        break;\n}"
      },
      "whenMoved": {
        "asGM": false,
        "command": "const api = game.modules.get(\"templatemacro\").api;\n\n// wait for the movement to finish\ntry {\n  while (template.object.x !== this.coords.current.x || template.object.y !== this.coords.current.y) {\n    await new Promise(resolve => setTimeout(resolve,100));\n  }\n} catch(err) {}\n\nlet contained;\nif (game.modules.get(\"walledtemplates\")?.active)\n  contained = template.object.targetsWithinShape().map(t => t.id);\nelse\n  contained = api.findContained(template);\n\n// remove immune targets from consideration\nconst preSelected = getProperty(template, \"flags.midi-qol.preSelectedTargets\") ?? [];\ncontained = contained.filter(tid => !preSelected.includes(tid));\ncontained = contained.filter(tid => MidiQOL.isTargetable(canvas.scene.tokens.get(tid)));\n\n// find tokens added/removed from the tokens inside the template\nconst targets = template.getFlag(\"midi-qol\", \"targets\")\nconst targetsToRemove = targets.filter(tid => !contained.includes(tid));\nconst targetsToAdd = contained.filter(tid => !targets.includes(tid))\n\n// Update the effects on the added/removed targets\nawait template.callMacro(\"never\", {template, action: \"doEffects\", targetsToRemove, targetsToAdd, userId: game.user.id});\n\nawait template.setFlag(\"midi-qol\", \"targets\", contained);\n\n"
      },
      "whenEntered": {
        "asGM": false,
        "command": "const preSelected = getProperty(template, \"flags.midi-qol.preSelectedTargets\") ?? [];\n// Don't include immune tokens\nif (preSelected.includes(token.id)) return;\nif (!MidiQOL.isTargetable(token)) return;\n\n// Check if token is inside walled templates template\nif (game.modules.get(\"walledtemplates\")?.active \n    && !template.object.targetsWithinShape().map(t=>t.id).includes(token.id)) {\n    console.log(\"entered \", token.id, \"excluded\")\n    return;\n}\n\nlet targets = await template.getFlag(\"midi-qol\", \"targets\");\nif (targets.includes(token.id)) return; // already included\n\n// Add the token to targets, apply any effects and do the damage roll for the target  \ntargets.push(token.id);\nawait template.callMacro(\"never\", {template, action: \"doEffects\", targetsToAdd: [token.id], userId: game.user.id});\n\n// record the targets in the template's range\nawait template.setFlag(\"midi-qol\", \"targets\", targets);\n\nif (game.combat.current.tokenId !== token.id) return; // Only when the token moved on its turn\nawait template.callMacro(\"never\", {template, action: \"doAttack\", targetsToAttack: [token.id], userId: game.user.id});\n\n"
      },
      "whenLeft": {
        "asGM": false,
        "command": "// Just in case walled templates thinks the token is still inside the template - templates can wrap around walls?\nif (game.modules.get(\"walledtemplates\")?.active \n    && template.object.targetsWithinShape().map(t=>t.id).includes(token.id)) {\n return;\n}\n\nlet targets = await template.getFlag(\"midi-qol\", \"targets\");\nif (!targets.includes(token.id)) return;\n\n// remove the effects from the token and remove it from the targets inside the template list\nawait template.callMacro(\"never\", {template, action: \"doEffects\", targetsToRemove: [token.id], userId: game.user.id});\ntargets = targets.filter(tid => tid !== token.id);\nawait template.setFlag(\"midi-qol\", \"targets\", targets)\n"
      },
      "whenTurnStart": {
        "asGM": false,
        "command": "const preSelected = getProperty(template, \"flags.midi-qol.preSelectedTargets\") ?? [];\n// Don't include immune tokens\nif (preSelected.includes(token.id)) return;\nif (!MidiQOL.isTargetable(token)) return;\n\n// Check if token is inside walled templates template\nif (game.modules.get(\"walledtemplates\")?.active \n    && !template.object.targetsWithinShape().map(t=>t.id).includes(token.id)) {\n    return;\n}\n\n// Token started their turn inside the template - punish them\nawait template.callMacro(\"never\", {template, action: \"doAttack\", targetsToAttack: [token.id], userId: game.user.id});"
      },
      "whenThrough": {
        "asGM": false,
        "command": "// Someone wandered through the template - thump them\nconst preSelected = getProperty(template, \"flags.midi-qol.preSelectedTargets\") ?? [];\nif (preSelected.includes(token.id)) return;\nif (!MidiQOL.isTargetable(token)) return;\n\nif (game.combat.current.tokenId !== token.id) return; // Only when the token moved on its turn\n\nawait template.callMacro(\"never\", {template, action: \"doAttack\", targetsToAttack: \n [token.id], userId: game.user.id});\n"
      },
      "whenTurnEnd": {
        "asGM": false,
        "command": "// If the effect/damage is applied on turn end then put the turn start code here instead"
      }
    }
  },
  "system": {
    "description": {
      "value": "<p>You call forth spirits to protect you. They flit around you to a distance of 15 feet for the duration. If you are good or neutral, their spectral form appears angelic or fey (your choice). If you are evil, they appear fiendish.</p><p>When you cast this spell, you can designate any number of creatures you can see to be unaffected by it. An affected creature's speed is halved in the area, and when the creature enters the area for the first time on a turn or starts its turn there, it must make a Wisdom saving throw. On a failed save, the creature takes 3d8 radiant damage (if you are good or neutral) or 3d8 necrotic damage (if you are evil). On a successful save, the creature takes half as much damage.</p><p><strong>At Higher Levels.</strong> When you cast this spell using a spell slot of 4th level or higher, the damage increases by 1d8 for each slot level above 3rd.</p><p></p><p><strong>midi-qol:</strong> requires walled templates installed and set to auto target (to attach the template to the token) and template macros installed.</p><p>Version 11.0.13</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "Basic Rules, Player's Handbook pg 278",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": "false"
    },
    "duration": {
      "value": "10",
      "units": "minute"
    },
    "cover": null,
    "crewed": false,
    "target": {
      "value": 15,
      "width": null,
      "units": "ft",
      "type": "radius"
    },
    "range": {
      "value": 0,
      "long": null,
      "units": "spec"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": null,
      "recovery": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": "",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 3,
    "school": "con",
    "components": {
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "level",
      "formula": "1d8"
    }
  },
  "_stats": {
    "systemId": "dnd5e",
    "systemVersion": "3.1.2",
    "coreVersion": "12.327",
    "createdTime": 1691370872716,
    "modifiedTime": 1715082519230,
    "lastModifiedBy": "STcmc1QZ0hx024Tl",
    "compendiumSource": null,
    "duplicateSource": null
  },
  "ownership": {
    "default": 0,
    "ffUVCzLexh57kZfU": 3
  },
  "_id": "WSvktG0CBa6VoITw",
  "sort": 200000,
  "_key": "!items!WSvktG0CBa6VoITw"
}
