{
  "name": "Rakish Audacity 11.4.38",
  "type": "feat",
  "img": "icons/skills/melee/strike-dagger-arcane-pink.webp",
  "effects": [
    {
      "_id": "Ns5pHr7gcYPTJ7HU",
      "flags": {
        "dae": {
          "stackable": "none",
          "transfer": true,
          "specialDuration": [
            "None"
          ],
          "macroRepeat": "none",
          "selfTarget": false,
          "selfTargetAlways": false,
          "durationExpression": ""
        },
        "ActiveAuras": {
          "isAura": false,
          "ignoreSelf": false,
          "hidden": false,
          "height": false,
          "aura": "None",
          "radius": "null",
          "alignment": "",
          "type": "",
          "save": "",
          "savedc": null,
          "hostile": false,
          "onlyOnce": false,
          "time": "None",
          "displayTemp": false
        },
        "core": {
          "statusId": ""
        },
        "dfreds-convenient-effects": {
          "description": ""
        }
      },
      "changes": [
        {
          "key": "flags.dnd5e.DamageBonusMacro",
          "mode": 0,
          "value": "ItemMacro",
          "priority": 20
        },
        {
          "key": "system.attributes.init.total",
          "mode": 2,
          "value": "@abilities.cha.mod",
          "priority": 20
        },
        {
          "key": "system.attributes.init.mod",
          "mode": 2,
          "value": "@abilities.cha.mod",
          "priority": 20
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null,
        "seconds": null,
        "combat": null,
        "rounds": null,
        "turns": null,
        "startRound": null,
        "startTurn": null
      },
      "origin": "Actor.DMTSWfQs8whM5FtE.Item.qgNwoSwmcF8DkhNy",
      "tint": "#ffffff",
      "transfer": true,
      "name": "Rakish Audacity",
      "description": "",
      "statuses": [],
      "_stats": {
        "coreVersion": "12.327",
        "systemId": null,
        "systemVersion": null,
        "createdTime": null,
        "modifiedTime": null,
        "lastModifiedBy": null,
        "compendiumSource": null,
        "duplicateSource": null
      },
      "img": "icons/skills/melee/strike-dagger-arcane-pink.webp",
      "type": "base",
      "system": {},
      "sort": 0,
      "_key": "!items.effects!HIfg0wHEgOAjY3hT.Ns5pHr7gcYPTJ7HU"
    }
  ],
  "flags": {
    "dae": {
      "activeEquipped": false,
      "alwaysActive": false,
      "macro": {
        "name": "Rakish Audacity 10.0.33",
        "img": "icons/skills/melee/strike-dagger-arcane-pink.webp",
        "type": "script",
        "scope": "global",
        "command": "const version = \"11.4.38\";\ntry {\n    if (![\"mwak\",\"rwak\"].includes(args[0].itemData.system.actionType)) return {}; // weapon attack\n    if (args[0].hitTargets.length < 1) return;\n    MidiQOL.warn(`Checking sneak attack for ${args[0].actor.name}`);\n    if (args[0].itemData.system.actionType === \"mwak\" && !args[0].itemData.system.properties?.fin) return {}; // ranged or finesse\n    token = canvas.tokens.get(args[0].tokenId);\n    actor = token.actor;\n    const rogueLevels = actor.getRollData().classes.rogue?.levels;\n    if (!rogueLevels) {\n      MidiQOL.warn(\"Sneak Attack Damage: Trying to do sneak attack and not a rogue\");\n      return {}; // rogue only\n    }\n    let target = canvas.tokens.get(args[0].hitTargets[0].id ?? args[0].hitTargers[0]._id);\n    \n    if (game.combat) {\n      const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn /100}`;\n      const lastTime = actor.getFlag(\"midi-qol\", \"sneakAttackTime\");\n      if (combatTime === lastTime) {\n       MidiQOL.warn(\"Sneak Attack Damage: Already done a sneak attack this turn\");\n       return {};\n      }\n    }\n    let isSneak = args[0].advantage;\n    let foundEnemy = true; // used to flag if hostile or neutrals surround target\n    if (!isSneak) {\n      foundEnemy = false;\n      let nearbyEnemy = canvas.tokens.placeables.filter(t => {\n        let nearby = (t.actor &&\n             t.actor?.id !== args[0].actor._id && // not me\n             t.id !== target.id && // not the target\n             t.actor?.system.attributes?.hp?.value > 0 && // not incapacitated\n             t.document.disposition !== target.document.disposition && // not an ally\n             MidiQOL.getDistance(t, target, false) <= 5 // close to the target\n         );\n    \n        foundEnemy = foundEnemy || (nearby && t.document.disposition === -target.document.disposition)\n        return nearby;\n      });\n      isSneak = nearbyEnemy.length>0;\n    }\n    if (!isSneak) {    // rakish audactity checkNearby\n        let totalNearbyToMe = MidiQOL.findNearby(null, token, 5, 9).length;\n        let distanceToTarget = MidiQOL.getDistance(target,token, false);\n        const rakish = !args[0].disadvantage && totalNearbyToMe === 1 && distanceToTarget <= 5;\n        if (rakish) {\n            foundEnemy = true; // don't display the neutrals warning\n            isSneak = true;\n        }\n    }\n    if (!isSneak) {\n        MidiQOL.warn(`${args[0].name} Not a sneak attack`);\n        return {};\n    }\n    let useSneak = foundry.utils.getProperty(actor, \"flags.dae.autoSneak\");\n    if (!useSneak) {\n        let dialog = new Promise((resolve, reject) => {\n          new Dialog({\n          // localize this text\n          title: \"Conditional Damage\",\n          content: `<p>Use Rakish Audacity attack?</p>` + (!foundEnemy?\"<p> Only Nuetral creatures nearby</p>\":\"\"),\n          buttons: {\n              one: {\n                  icon: '<i class=\"fas fa-check\"></i>',\n                  label: \"Confirm\",\n                  callback: () => resolve(true)\n              },\n              two: {\n                  icon: '<i class=\"fas fa-times\"></i>',\n                  label: \"Cancel\",\n                  callback: () => {resolve(false)}\n              }\n          },\n          default: \"two\"\n          }).render(true);\n        });\n        useSneak = await dialog;\n    }\n    if (!useSneak) return {}\n    const baseDice = Math.ceil(rogueLevels/2);\n    if (game.combat) {\n      const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn /100}`;\n      const lastTime = actor.getFlag(\"midi-qol\", \"sneakAttackTime\");\n      if (combatTime !== lastTime) {\n         await actor.setFlag(\"midi-qol\", \"sneakAttackTime\", combatTime)\n      }\n    }\n    const damageFormula = new CONFIG.Dice.DamageRoll(`${baseDice}d6`, {}, {\n        critical: args[0].isCritical ?? false, \n        powerfulCritical: game.settings.get(\"dnd5e\", \"criticalDamageMaxDice\"),\n        multiplyNumeric: game.settings.get(\"dnd5e\",  \"criticalDamageModifiers\")\n    }).formula\n    return {damageRoll: damageFormula, flavor: \"Rakish Audacity\"};\n\n}  catch (err) {\n    console.error(`${args[0].itemData.name} - Rakish Audacity ${version}`, err);\n}",
        "author": "STcmc1QZ0hx024Tl",
        "ownership": {
          "default": 3
        },
        "_id": null,
        "folder": null,
        "sort": 0,
        "flags": {},
        "_stats": {
          "systemId": null,
          "systemVersion": null,
          "coreVersion": null,
          "createdTime": null,
          "modifiedTime": null,
          "lastModifiedBy": null
        }
      }
    },
    "exportSource": {
      "world": "storm-kings-thunder",
      "system": "dnd5e",
      "coreVersion": "0.7.9",
      "systemVersion": "1.2.3"
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Rakish Audacity",
          "type": "script",
          "author": "devnIbfBHb74U9Zv",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const version = \"0.9.52\";\ntry {\n    if (![\"mwak\",\"rwak\"].includes(args[0].itemData.data.actionType)) return {}; // weapon attack\n    if (args[0].hitTargets.length < 1) return;\n    MidiQOL.warn(`Checking sneak attack for ${args[0].actor.name}`);\n    if (args[0].itemData.data.actionType === \"mwak\" && !args[0].itemData.data.properties?.fin) return {}; // ranged or finesse\n    token = canvas.tokens.get(args[0].tokenId);\n    actor = token.actor;\n    const rogueLevels = actor.getRollData().classes.rogue?.levels;\n    if (!rogueLevels) {\n      MidiQOL.warn(\"Sneak Attack Damage: Trying to do sneak attack and not a rogue\");\n      return {}; // rogue only\n    }\n    let target = canvas.tokens.get(args[0].hitTargets[0].id ?? args[0].hitTargers[0]._id);\n    \n    if (game.combat) {\n      const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn /100}`;\n      const lastTime = actor.getFlag(\"midi-qol\", \"sneakAttackTime\");\n      if (combatTime === lastTime) {\n       MidiQOL.warn(\"Sneak Attack Damage: Already done a sneak attack this turn\");\n       return {};\n      }\n    }\n    let isSneak = args[0].advantage;\n    let foundEnemy = true; // used to flag if hostile or neutrals surround target\n    if (!isSneak) {\n      foundEnemy = false;\n      let nearbyEnemy = canvas.tokens.placeables.filter(t => {\n        let nearby = (t.actor &&\n             t.actor?.id !== args[0].actor._id && // not me\n             t.id !== target.id && // not the target\n             t.actor?.data.data.attributes?.hp?.value > 0 && // not incapacitated\n             t.data.disposition !== target.data.disposition && // not an ally\n             MidiQOL.getDistance(t, target, false) <= 5 // close to the target\n         );\n    \n        foundEnemy = foundEnemy || (nearby && t.data.disposition === -target.data.disposition)\n        return nearby;\n      });\n      isSneak = nearbyEnemy.length>0;\n    }\n    if (!isSneak) {    // rakish audactity checkNearby\n        let totalNearbyToMe = MidiQOL.findNearby(null, token, 5, 9).length;\n        let distanceToTarget = MidiQOL.getDistance(target,token, false);\n        const rakish = !args[0].disadvantage && totalNearbyToMe === 1 && distanceToTarget <= 5;\n        if (rakish) {\n            foundEnemy = true; // don't display the neutrals warning\n            isSneak = true;\n        }\n    }\n    if (!isSneak) {\n        MidiQOL.warn(`${args[0].name} Not a sneak attack`);\n        return {};\n    }\n    let useSneak = getProperty(actor.data, \"flags.dae.autoSneak\");\n    if (!useSneak) {\n        let dialog = new Promise((resolve, reject) => {\n          new Dialog({\n          // localize this text\n          title: \"Conditional Damage\",\n          content: `<p>Use Sneak attack?</p>` + (!foundEnemy?\"<p> Only Nuetral creatures nearby</p>\":\"\"),\n          buttons: {\n              one: {\n                  icon: '<i class=\"fas fa-check\"></i>',\n                  label: \"Confirm\",\n                  callback: () => resolve(true)\n              },\n              two: {\n                  icon: '<i class=\"fas fa-times\"></i>',\n                  label: \"Cancel\",\n                  callback: () => {resolve(false)}\n              }\n          },\n          default: \"two\"\n          }).render(true);\n        });\n        useSneak = await dialog;\n    }\n    if (!useSneak) return {}\n    const diceMult = args[0].isCritical ? 2: 1;\n    const baseDice = Math.ceil(rogueLevels/2);\n    if (game.combat) {\n      const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn /100}`;\n      const lastTime = actor.getFlag(\"midi-qol\", \"sneakAttackTime\");\n      if (combatTime !== lastTime) {\n         await actor.setFlag(\"midi-qol\", \"sneakAttackTime\", combatTime)\n      }\n    }\n    \n    // How to check that we've already done one this turn?\n    return {damageRoll: `${baseDice * diceMult}d6`, flavor: \"Sneak Attack\"};\n}  catch (err) {\n    console.error(`${args[0].itemData.name} - Rakish Audacity ${version}`, err);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        },
        "name": "Rakish Audacity 10.0.33",
        "type": "script",
        "img": "icons/svg/dice-target.svg",
        "scope": "global",
        "command": "const version = \"10.0.33\";\ntry {\n    if (![\"mwak\",\"rwak\"].includes(args[0].itemData.system.actionType)) return {}; // weapon attack\n    if (args[0].hitTargets.length < 1) return;\n    MidiQOL.warn(`Checking sneak attack for ${args[0].actor.name}`);\n    if (args[0].itemData.system.actionType === \"mwak\" && !args[0].itemData.system.properties?.fin) return {}; // ranged or finesse\n    token = canvas.tokens.get(args[0].tokenId);\n    actor = token.actor;\n    const rogueLevels = actor.getRollData().classes.rogue?.levels;\n    if (!rogueLevels) {\n      MidiQOL.warn(\"Sneak Attack Damage: Trying to do sneak attack and not a rogue\");\n      return {}; // rogue only\n    }\n    let target = canvas.tokens.get(args[0].hitTargets[0].id ?? args[0].hitTargers[0]._id);\n    \n    if (game.combat) {\n      const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn /100}`;\n      const lastTime = actor.getFlag(\"midi-qol\", \"sneakAttackTime\");\n      if (combatTime === lastTime) {\n       MidiQOL.warn(\"Sneak Attack Damage: Already done a sneak attack this turn\");\n       return {};\n      }\n    }\n    let isSneak = args[0].advantage;\n    let foundEnemy = true; // used to flag if hostile or neutrals surround target\n    if (!isSneak) {\n      foundEnemy = false;\n      let nearbyEnemy = canvas.tokens.placeables.filter(t => {\n        let nearby = (t.actor &&\n             t.actor?.id !== args[0].actor._id && // not me\n             t.id !== target.id && // not the target\n             t.actor?.system.attributes?.hp?.value > 0 && // not incapacitated\n             t.document.disposition !== target.document.disposition && // not an ally\n             MidiQOL.getDistance(t, target, false) <= 5 // close to the target\n         );\n    \n        foundEnemy = foundEnemy || (nearby && t.document.disposition === -target.document.disposition)\n        return nearby;\n      });\n      isSneak = nearbyEnemy.length>0;\n    }\n    if (!isSneak) {    // rakish audactity checkNearby\n        let totalNearbyToMe = MidiQOL.findNearby(null, token, 5, 9).length;\n        let distanceToTarget = MidiQOL.getDistance(target,token, false);\n        const rakish = !args[0].disadvantage && totalNearbyToMe === 1 && distanceToTarget <= 5;\n        if (rakish) {\n            foundEnemy = true; // don't display the neutrals warning\n            isSneak = true;\n        }\n    }\n    if (!isSneak) {\n        MidiQOL.warn(`${args[0].name} Not a sneak attack`);\n        return {};\n    }\n    let useSneak = getProperty(actor, \"flags.dae.autoSneak\");\n    if (!useSneak) {\n        let dialog = new Promise((resolve, reject) => {\n          new Dialog({\n          // localize this text\n          title: \"Conditional Damage\",\n          content: `<p>Use Rakish Audacity attack?</p>` + (!foundEnemy?\"<p> Only Nuetral creatures nearby</p>\":\"\"),\n          buttons: {\n              one: {\n                  icon: '<i class=\"fas fa-check\"></i>',\n                  label: \"Confirm\",\n                  callback: () => resolve(true)\n              },\n              two: {\n                  icon: '<i class=\"fas fa-times\"></i>',\n                  label: \"Cancel\",\n                  callback: () => {resolve(false)}\n              }\n          },\n          default: \"two\"\n          }).render(true);\n        });\n        useSneak = await dialog;\n    }\n    if (!useSneak) return {}\n    const baseDice = Math.ceil(rogueLevels/2);\n    if (game.combat) {\n      const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn /100}`;\n      const lastTime = actor.getFlag(\"midi-qol\", \"sneakAttackTime\");\n      if (combatTime !== lastTime) {\n         await actor.setFlag(\"midi-qol\", \"sneakAttackTime\", combatTime)\n      }\n    }\n    const damageFormula = new CONFIG.Dice.DamageRoll(`${baseDice}d6`, {}, {\n        critical: args[0].isCritical ?? false, \n        powerfulCritical: game.settings.get(\"dnd5e\", \"criticalDamageMaxDice\"),\n        multiplyNumeric: game.settings.get(\"dnd5e\",  \"criticalDamageModifiers\")\n    }).formula\n    return {damageRoll: damageFormula, flavor: \"Rakish Audacity\"};\n\n}  catch (err) {\n    console.error(`${args[0].itemData.name} - Rakish Audacity ${version}`, err);\n}",
        "sort": 0,
        "ownership": {
          "default": 0
        },
        "flags": {},
        "_stats": {
          "systemId": null,
          "systemVersion": null,
          "coreVersion": null,
          "createdTime": null,
          "modifiedTime": null,
          "lastModifiedBy": null
        }
      }
    },
    "core": {
      "sourceId": "Item.FkeL8Qyuy8EE8oGD"
    },
    "favtab": {
      "isFavorite": false
    },
    "betterRolls5e": {
      "critRange": {
        "value": null,
        "type": "String"
      },
      "critDamage": {
        "value": "",
        "type": "String"
      },
      "quickDesc": {
        "value": true,
        "altValue": true,
        "type": "Boolean"
      },
      "quickProperties": {
        "value": true,
        "altValue": true,
        "type": "Boolean"
      },
      "quickOther": {
        "value": true,
        "altValue": true,
        "type": "Boolean",
        "context": ""
      },
      "quickFlavor": {
        "value": true,
        "altValue": true,
        "type": "Boolean"
      },
      "quickAttack": {
        "type": "Boolean",
        "value": true,
        "altValue": true
      },
      "quickSave": {
        "type": "Boolean",
        "value": true,
        "altValue": true
      },
      "quickDamage": {
        "type": "Array",
        "value": [],
        "altValue": [],
        "context": []
      },
      "quickCharges": {
        "type": "Boolean",
        "value": {
          "use": true,
          "resource": true,
          "charge": false
        },
        "altValue": {
          "use": true,
          "resource": true,
          "charge": false
        }
      },
      "quickTemplate": {
        "type": "Boolean",
        "value": true,
        "altValue": true
      },
      "quickPrompt": {
        "type": "Boolean",
        "value": false,
        "altValue": false
      }
    },
    "midi-qol": {
      "onUseMacroName": "",
      "rollAttackPerTarget": "default",
      "itemCondition": "",
      "effectCondition": ""
    },
    "autoanimations": {
      "killAnim": false,
      "override": false,
      "animType": "t1",
      "animName": "",
      "hmAnim": "a1",
      "color": "n1",
      "dtvar": "dt1",
      "explosion": false,
      "explodeVariant": "ev1",
      "explodeColor": "ec1",
      "explodeRadius": "0",
      "explodeLoop": "1",
      "selfRadius": "5",
      "animTint": "#ffffff",
      "auraOpacity": 0.75,
      "ctaOption": false
    },
    "cf": {
      "id": "temp_qt0kn9os0vl",
      "color": "#000000"
    },
    "mre-dnd5e": {
      "formulaGroups": [
        {
          "label": "Primary",
          "formulaSet": []
        }
      ]
    },
    "midiProperties": {
      "confirmTargets": "default",
      "autoFailFriendly": false,
      "autoSaveFriendly": false,
      "critOther": false,
      "offHandWeapon": false,
      "magicdam": false,
      "magiceffect": false,
      "noConcentrationCheck": false,
      "toggleEffect": false,
      "ignoreTotalCover": false
    }
  },
  "system": {
    "description": {
      "value": "<p>Beginning at 1st level, you know how to strike subtly and exploit a foe's distraction. Once per turn, you can deal an extra [[/r 1d6]] damage to one creature you hit with an attack if you have advantage on the attack roll. The attack must use a finesse or a ranged weapon.</p><p>You don't need advantage on the attack roll if another enemy of the target is within 5 feet of it, that enemy isn't <a href=\"https://5e.tools/conditionsdiseases.html#incapacitated_phb\">incapacitated</a>, and you don't have disadvantage on the attack roll.</p><p>The amount of the extra damage increases as you gain levels in this class, as shown in the Sneak Attack column of the Rogue table.</p><p></p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "PHB",
    "activation": {
      "type": "special",
      "cost": 0,
      "condition": ""
    },
    "duration": {
      "value": "24",
      "units": "hour"
    },
    "cover": null,
    "crewed": false,
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": null,
      "max": "",
      "per": null,
      "recovery": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "",
    "attackBonus": "",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "type": {
      "value": "",
      "subtype": ""
    },
    "requirements": "Rogue 1",
    "recharge": {
      "value": null,
      "charged": false
    }
  },
  "_stats": {
    "systemId": "dnd5e",
    "systemVersion": "3.2.1",
    "coreVersion": "12.327",
    "createdTime": 1661995926127,
    "modifiedTime": 1719458210279,
    "lastModifiedBy": "STcmc1QZ0hx024Tl",
    "compendiumSource": "Item.FkeL8Qyuy8EE8oGD",
    "duplicateSource": null
  },
  "ownership": {
    "default": 0,
    "devnIbfBHb74U9Zv": 3,
    "ffUVCzLexh57kZfU": 3
  },
  "folder": "HZNnxQwiyl5E1X6W",
  "sort": 1500000,
  "_id": "HIfg0wHEgOAjY3hT",
  "_key": "!items!HIfg0wHEgOAjY3hT"
}
