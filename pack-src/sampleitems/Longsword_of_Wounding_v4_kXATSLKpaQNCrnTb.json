{
  "name": "Longsword of Wounding v4",
  "type": "weapon",
  "img": "icons/magic/water/heart-ice-freeze.webp",
  "effects": [
    {
      "_id": "BqzfX8p9NqtZ1Qxx",
      "changes": [
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "0",
          "priority": 20
        }
      ],
      "disabled": false,
      "duration": {
        "rounds": 99,
        "startTime": null,
        "seconds": null,
        "combat": null,
        "turns": null,
        "startRound": null,
        "startTurn": null
      },
      "origin": "Item.W4NUvzHSxGWmNa8Z",
      "transfer": false,
      "flags": {
        "dae": {
          "stackable": "countDeleteDecrement",
          "macroRepeat": "startEveryTurn",
          "specialDuration": [],
          "transfer": false,
          "enableCondition": "",
          "disableCondition": "",
          "disableIncapacitated": false,
          "selfTarget": false,
          "selfTargetAlways": false,
          "dontApply": false,
          "showIcon": false,
          "durationExpression": ""
        },
        "ActiveAuras": {
          "isAura": false,
          "radius": "",
          "aura": "None",
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "hostile": false,
          "onlyOnce": false,
          "nameOverride": "",
          "customCheck": "",
          "displayTemp": false,
          "wallsBlock": "system"
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "core": {
          "overlay": false
        }
      },
      "tint": "#ffffff",
      "name": "Wounded",
      "description": "",
      "statuses": [],
      "_stats": {
        "compendiumSource": null,
        "duplicateSource": null,
        "coreVersion": "12.331",
        "systemId": "dnd5e",
        "systemVersion": "4.1.2",
        "createdTime": null,
        "modifiedTime": null,
        "lastModifiedBy": null
      },
      "img": "icons/magic/water/heart-ice-freeze.webp",
      "type": "base",
      "system": {},
      "sort": 0,
      "_key": "!items.effects!kXATSLKpaQNCrnTb.BqzfX8p9NqtZ1Qxx"
    }
  ],
  "flags": {
    "core": {
      "sourceId": "Compendium.dnd5e.items.JpwuGtFkfrGibQpP"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Greatsword of Wounding",
          "type": "script",
          "author": "devnIbfBHb74U9Zv",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "//\nconst lastArg = args[args.length - 1];\nlet ttoken = await fromUuid(lastArg.tokenUuid);\nconst tactor = ttoken?.actor;\nconst item = await fromUuid(lastArg.origin);\nif (args[0] === \"on\") {\n  const sourceActor = item.parent;\n\n  const combatTime = game.combat.round + game.combat.turn / 100;\n  const lastTime = getProperty(sourceActor.data.flags, \"midi-qol.woundedTime\");\n  lastArg.canWound = !game.combat || (combatTime !== lastTime);\n  if (game.combat && lastArg.canWound) {\n    let combatTime = game.combat.round + game.combat.turn / 100;\n    let lastTime = getProperty(sourceActor.data.flags, \"midi-qol.woundedTime\");\n    if (combatTime !== lastTime) {\n      setProperty(sourceActor.data.flags, \"midi-qol.woundedTime\", combatTime)\n    }\n  } \n  if (!lastArg.canWound) {\n    const stacks = getProperty(lastArg.efData, \"flags.dae.stacks\") || 1;\n    const label = lastArg.efData.label.replace(/\\s+\\(\\d*\\)/, \"\") +` (${stacks - 1})`;\n    Hooks.once(\"midi-qol.RollComplete\", () => {\n    tactor.updateEmbeddedDocuments(\"ActiveEffect\", [{ _id: lastArg.efData._id, \"flags.dae.stacks\": stacks - 1, \"label\": label }]);\n    });\n  }\n} else if (args[0] === \"each\") {\n  const woundCount = getProperty(lastArg.efData, \"flags.dae.stacks\");\n  if (!woundCount) return;\n  const saveType = \"con\";\n  const DC = 15;\n  const flavor = `${CONFIG.DND5E.abilities[saveType]} DC${DC} ${item?.name || \"\"}`;\n  let save = (await tactor.rollAbilitySave(saveType, { flavor, fastForward: true })).total;\n  if (save >= DC) {\n    const effectsToDelete = tactor.effects.filter(ef => ef.data.origin === lastArg.origin).map(ef => ef.id);\n    ChatMessage.create({content: \"Save was made\"});\n    await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: tactor.uuid, effects: [lastArg.effectId] })\n  } else {\n    let damageRoll = new Roll(`${woundCount}d4[necrotic]`).roll(); // could be argument\n    new MidiQOL.DamageOnlyWorkflow(tactor, ttoken, damageRoll.total, \"necrotic\", [ttoken], damageRoll, { flavor: `Failed Save for ${item.name}`, itemData: item?.toObject(), itemCardId: \"new\", useOther: true })\n  }\n} else if (args[0] === \"off\") {\n  // do any clean up\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        },
        "name": "Greatsword of Wounding 10.0.10",
        "type": "script",
        "img": "icons/svg/dice-target.svg",
        "scope": "global",
        "command": "const version = \"10.0.10\";\ntry {\n  const lastArg = args[args.length - 1];\n  let ttoken = await fromUuid(lastArg.tokenUuid);\n  const tactor = ttoken?.actor;\n  const item = await fromUuid(lastArg.origin);\n  if (args[0] === \"on\") {\n    const sourceActor = item.parent;\n    const combatTime = game.combat.round + game.combat.turn / 100;\n    const lastTime = getProperty(sourceActor.flags, \"midi-qol.woundedTime\");\n    lastArg.canWound = !game.combat || (combatTime !== lastTime);\n    if (game.combat && lastArg.canWound) {\n      let combatTime = game.combat.round + game.combat.turn / 100;\n      let lastTime = getProperty(sourceActor.flags, \"midi-qol.woundedTime\");\n      if (combatTime !== lastTime) {\n        setProperty(sourceActor.flags, \"midi-qol.woundedTime\", combatTime)\n      }\n    } \n    if (!lastArg.canWound) {\n      const stacks = getProperty(lastArg.efData, \"flags.dae.stacks\") || 1;\n      const label = lastArg.efData.label.replace(/\\s+\\(\\d*\\)/, \"\") +` (${stacks - 1})`;\n      Hooks.once(\"midi-qol.RollComplete\", () => {\n      tactor.updateEmbeddedDocuments(\"ActiveEffect\", [{ _id: lastArg.efData._id, \"flags.dae.stacks\": stacks - 1, \"label\": label }]);\n      });\n    }\n  } else if (args[0] === \"each\") {\n    const woundCount = getProperty(lastArg.efData, \"flags.dae.stacks\");\n    if (!woundCount) return;\n    const saveType = \"con\";\n    const DC = 15;\n    const flavor = `${CONFIG.DND5E.abilities[saveType]} DC${DC} ${item?.name || \"\"}`;\n    let save = (await tactor.rollAbilitySave(saveType, { flavor, fastForward: true })).total;\n    if (save >= DC) {\n      const effectsToDelete = tactor.effects.filter(ef => ef.origin === lastArg.origin).map(ef => ef.id);\n      ChatMessage.create({content: \"Save was made\"});\n      await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: tactor.uuid, effects: [lastArg.effectId] })\n    } else {\n      let damageRoll = await new Roll(`${woundCount}d4[necrotic]`).roll({async: true}); // could be argument\n      new MidiQOL.DamageOnlyWorkflow(tactor, ttoken, damageRoll.total, \"necrotic\", [ttoken], damageRoll, { flavor: `Failed Save for ${item.name}`, itemData: item?.toObject(false), itemCardId: \"new\", useOther: true })\n    }\n  } else if (args[0] === \"off\") {\n    // do any clean up\n  }\n} catch (err)  {\n    console.error(`Greatsword of Wounding ${version}`, err);\n}",
        "sort": 0,
        "ownership": {
          "default": 0
        },
        "flags": {},
        "_stats": {
          "systemId": null,
          "systemVersion": null,
          "coreVersion": null,
          "createdTime": null,
          "modifiedTime": null,
          "lastModifiedBy": null
        }
      }
    },
    "midi-qol": {
      "onUseMacroName": "[postActiveEffects]ItemMacro",
      "criticalThreshold": "20",
      "effectActivation": false,
      "fumbleThreshold": null,
      "rollAttackPerTarget": "default",
      "removeAttackDamageButtons": "default",
      "itemCondition": "",
      "otherCondition": "",
      "effectCondition": "",
      "reactionCondition": "",
      "woundedTime": 263.06,
      "AoETargetType": "any",
      "AoETargetTypeIncludeSelf": true,
      "autoTarget": "default"
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "cf": {
      "id": "temp_mxc6kjqa6kp",
      "color": "#000000"
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false,
      "autoFailFriendly": false,
      "autoSaveFriendly": false,
      "offHandWeapon": false,
      "ignoreTotalCover": false,
      "confirmTargets": "default",
      "saveDamage": "default",
      "bonusSaveDamage": "default",
      "otherSaveDamage": "default",
      "noConcentrationCheck": false,
      "idr": false,
      "idi": false,
      "idv": false,
      "ida": false
    },
    "dae": {
      "macro": {
        "name": "Greatsword of Wounding v4",
        "img": "icons/magic/water/heart-ice-freeze.webp",
        "type": "script",
        "scope": "global",
        "command": "const version = \"12.4.7\";\ntry {\n  if (args[0].macroPass === \"postActiveEffects\") {\n    console.error(args, workflow, scope)\n    const target = workflow.hitTargets.first();\n    if (!target) return;\n    let combatTime;\n    if (game.combat) combatTime = (game.combat.round ?? 0) + (game.combat.turn ?? 0) / 100;\n    macroItem.setFlag(\"midi-qol\", \"woundedTime\", combatTime)\n  } else if (args[0] === \"each\") {\n    const lastArg = args[args.length - 1];\n    let ttoken = await fromUuid(lastArg.tokenUuid);\n    const tactor = ttoken?.actor;\n    const woundCount = foundry.utils.getProperty(lastArg.efData, \"flags.dae.stacks\") ?? 1;\n    const saveType = \"con\";\n    const dc = 15;\n    const flavor = `${macroItem?.name || \"\"} ${game.i18n.format(\"DND5E.SavingThrowDC\", {dc, ability: CONFIG.DND5E.abilities[saveType].label})}`;\n    let save = (await tactor.rollAbilitySave(saveType, { flavor, fastForward: true })).total;\n    if (save >= dc) {\n      ChatMessage.create({content: `${tactor.name} ${macroItem.name} ${game.i18n.localize(\"midi-qol.saving-throw\")} ${game.i18n.localize(\"midi-qol.save-success\")}`});\n      effect = fromUuidSync(lastArg.effectUuid);\n\n      await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: tactor.uuid, effects: [lastArg.effectId], options: {removeStacks: woundCount} })\n    } else {\n      let damageRoll = await new Roll(`${woundCount}d4[necrotic]`).roll(); // could be argument\n      new MidiQOL.DamageOnlyWorkflow(tactor, ttoken, damageRoll.total, \"necrotic\", [ttoken], damageRoll, { flavor: `Failed Save for ${item.name}`, itemData: item?.toObject(false), itemCardId: \"new\", useOther: true })\n    }\n  } else if (args[0] === \"off\") {\n    // do any clean up\n  }\n} catch (err)  {\n    console.error(`${macroItem.name} ${version}`, err);\n}",
        "author": "Zl1BOUaPLwDEujaL",
        "ownership": {
          "default": 3
        },
        "_id": null,
        "folder": null,
        "sort": 0,
        "flags": {},
        "_stats": {
          "systemId": "dnd5e",
          "systemVersion": "4.0.4",
          "coreVersion": "12.331",
          "createdTime": null,
          "modifiedTime": null,
          "lastModifiedBy": null,
          "compendiumSource": null,
          "duplicateSource": null
        }
      }
    },
    "dnd5e": {
      "persistSourceMigration": true,
      "last": {
        "dnd5eactivity000": {
          "attackMode": "twoHanded",
          "damageType": {
            "0": "slashing"
          }
        }
      },
      "dependents": [
        {
          "uuid": "Actor.zv3UM4nmOlSTDMy1.ActiveEffect.OaAeEeeYcDiIoqN0"
        },
        {
          "uuid": "Scene.GO63mgFDMhBfPVWf.Token.1GTv5xI3qWi7yhcq.Actor.iyIORZ1kuLd4tkKV.ActiveEffect.ZRUd8dwGGJBQw052"
        }
      ],
      "riders": {
        "activity": [],
        "effect": []
      }
    },
    "tidy5e-sheet": {
      "section": "",
      "actionSection": ""
    }
  },
  "system": {
    "description": {
      "value": "<p><em>(Requires attunement)</em></p>\n<p>Hit points lost to this weapon's damage can be regained only through a short or long rest, rather than by regeneration, magic, or any other means.</p>\n<p>Once per turn, when you hit a creature with an attack using this magic weapon, you can wound the target. At the start of each of the wounded creature's turns, it takes 1d4 necrotic damage for each time you've wounded it, and it can then make a DC 15 Constitution saving throw, ending the effect of all such wounds on itself on a success. Alternatively, the wounded creature, or a creature within 5 feet of it, can use an action to make a DC 15 Wisdom (Medicine) check, ending the effect of such wounds on it on a success.<br /><br />This version uses an item amcro and enforces the once per turn rule.</p>",
      "chat": ""
    },
    "source": {
      "custom": "DMG pg. 207",
      "revision": 1,
      "rules": "2024"
    },
    "quantity": 1,
    "weight": {
      "value": 6,
      "units": "lb"
    },
    "price": {
      "value": 2000,
      "denomination": "gp"
    },
    "attunement": "required",
    "rarity": "",
    "identified": true,
    "cover": null,
    "crewed": false,
    "range": {
      "value": null,
      "long": null,
      "units": "ft",
      "reach": null
    },
    "uses": {
      "max": "",
      "spent": 0,
      "recovery": []
    },
    "damage": {
      "versatile": {
        "number": null,
        "denomination": 0,
        "bonus": "",
        "types": [],
        "custom": {
          "enabled": false,
          "formula": ""
        },
        "scaling": {
          "mode": "",
          "number": null,
          "formula": ""
        }
      },
      "base": {
        "number": 1,
        "denomination": 8,
        "bonus": "",
        "types": [
          "slashing"
        ],
        "custom": {
          "enabled": false,
          "formula": ""
        },
        "scaling": {
          "mode": "",
          "number": null,
          "formula": ""
        }
      }
    },
    "armor": {
      "value": 10
    },
    "hp": {
      "value": 0,
      "max": 0,
      "dt": null,
      "conditions": ""
    },
    "properties": [
      "ver"
    ],
    "proficient": 0,
    "unidentified": {
      "description": ""
    },
    "type": {
      "value": "martialM",
      "baseItem": ""
    },
    "activities": {
      "dnd5eactivity000": {
        "_id": "dnd5eactivity000",
        "type": "attack",
        "activation": {
          "type": "action",
          "value": 1,
          "condition": "",
          "override": false
        },
        "consumption": {
          "targets": [],
          "scaling": {
            "allowed": false,
            "max": ""
          },
          "spellSlot": true
        },
        "description": {
          "chatFlavor": ""
        },
        "duration": {
          "concentration": false,
          "value": "",
          "units": "inst",
          "special": "",
          "override": false
        },
        "effects": [
          {
            "_id": "BqzfX8p9NqtZ1Qxx"
          }
        ],
        "range": {
          "units": "ft",
          "special": "",
          "override": false
        },
        "target": {
          "template": {
            "count": "",
            "contiguous": false,
            "type": "",
            "size": "",
            "width": "",
            "height": "",
            "units": ""
          },
          "affects": {
            "count": "",
            "type": "",
            "choice": false,
            "special": ""
          },
          "prompt": true,
          "override": false
        },
        "uses": {
          "spent": 0,
          "max": "",
          "recovery": []
        },
        "attack": {
          "ability": "",
          "bonus": "",
          "critical": {
            "threshold": null
          },
          "flat": false,
          "type": {
            "value": "melee",
            "classification": "weapon"
          }
        },
        "damage": {
          "critical": {
            "bonus": ""
          },
          "includeBase": true,
          "parts": []
        },
        "sort": 0,
        "useConditionText": "",
        "effectConditionText": "combatTime !== item.flags[\"midi-qol\"]?.woundedTime",
        "attackMode": "twoHanded",
        "ammunition": "",
        "otherActivityUuid": "",
        "name": "",
        "macroData": {
          "name": "",
          "command": ""
        },
        "ignoreTraits": {
          "idi": false,
          "idr": false,
          "idv": false,
          "ida": false
        },
        "midiProperties": {
          "forceDialog": false,
          "confirmTargets": "default",
          "automationOnly": false,
          "identifier": ""
        },
        "otherActivityId": ""
      }
    },
    "identifier": "greatsword-of-wounding-11438",
    "container": null,
    "ammunition": {},
    "magicalBonus": null,
    "mastery": "",
    "attuned": false,
    "equipped": false
  },
  "_stats": {
    "compendiumSource": "Compendium.dnd5e.items.JpwuGtFkfrGibQpP",
    "duplicateSource": null,
    "coreVersion": "12.331",
    "systemId": "dnd5e",
    "systemVersion": "4.1.2",
    "createdTime": 1734180119396,
    "modifiedTime": 1734180119396,
    "lastModifiedBy": "Zl1BOUaPLwDEujaL"
  },
  "folder": "5Ok9Jbl5nOokCkqf",
  "_id": "kXATSLKpaQNCrnTb",
  "sort": 112500,
  "ownership": {
    "default": 0,
    "Zl1BOUaPLwDEujaL": 3
  },
  "_key": "!items!kXATSLKpaQNCrnTb"
}
