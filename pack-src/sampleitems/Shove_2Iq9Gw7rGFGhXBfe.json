{
  "name": "Shove",
  "type": "feat",
  "img": "icons/skills/melee/unarmed-punch-fist-white.webp",
  "system": {
    "description": {
      "value": "<p><em>This feature is safe to rename.</em></p><p>midi-qol: 11.0.7</p>",
      "chat": ""
    },
    "source": {
      "custom": "",
      "revision": 1,
      "rules": "2024"
    },
    "uses": {
      "max": "",
      "spent": 0,
      "recovery": []
    },
    "type": {
      "value": "",
      "subtype": ""
    },
    "requirements": "",
    "activities": {
      "dnd5eactivity000": {
        "_id": "dnd5eactivity000",
        "type": "utility",
        "activation": {
          "type": "action",
          "value": 1,
          "condition": "",
          "override": false
        },
        "consumption": {
          "targets": [],
          "scaling": {
            "allowed": false,
            "max": ""
          },
          "spellSlot": true
        },
        "description": {
          "chatFlavor": ""
        },
        "duration": {
          "concentration": false,
          "value": "",
          "units": "",
          "special": "",
          "override": false
        },
        "effects": [],
        "range": {
          "units": "touch",
          "special": "",
          "override": false
        },
        "target": {
          "template": {
            "count": "",
            "contiguous": false,
            "type": "",
            "size": "",
            "width": "",
            "height": "",
            "units": ""
          },
          "affects": {
            "count": "1",
            "type": "creature",
            "choice": false,
            "special": ""
          },
          "prompt": true,
          "override": false
        },
        "uses": {
          "spent": 0,
          "max": "",
          "recovery": []
        },
        "roll": {
          "formula": "",
          "name": "",
          "prompt": false,
          "visible": false
        },
        "sort": 0,
        "useConditionText": "",
        "effectConditionText": "",
        "macroData": {
          "name": "Midi Utility",
          "command": "try {\n    async function success(sourceToken, targetToken, results) {\n    d = new Dialog({\n        title: `${item.name} ${game.i18n.localize(\"midi-qol.save-success\")}`,\n        content: \"what do you want to do?\",\n        buttons: {\n                        move: {\n                icon: '<image src=\"icons/svg/direction.svg\" width=\"30\" height=\"30\" style=\"border:0px\">',\n                label: \"Move\",\n                callback: () => {MidiQOL.moveTokenAwayFromPoint(targetToken, 5, sourceToken.center)}\n            },\n            prone: {\n                icon: '<image src=\"icons/svg/falling.svg\" width=\"30\" height=\"30\" style=\"border:0px\">',\n                label: `${game.i18n.localize(\"EFFECT.StatusProne\")}`,\n                callback: () => {\n                    if (MidiQOL.hasCondition(targetToken, \"Prone\")) return;\n                    let se = CONFIG.statusEffects.find(i => { // This will find a convenient effect\n                            if (i.statuses instanceof Set) return i.statuses.has(\"prone\");\n                            return i.statuses?.find(s => s === \"prone\")\n                        });\n                        \n                    if (!se) se = CONFIG.statusEffects.find(i => i.id === \"prone\"); // get the default status effect\n                    targetToken.toggleEffect(se, {active: true});\n                }\n            }\n\n        },\n        default: \"move\"\n    })\n    d.render(true);\n}\n\n\nif (!token) token = MidiQOL.tokenForActor(actor);\nif (!token) {\n    ui.notifications.warn(`${actor.name} does not have a token on the canvas`)\n    return;\n}\nlet target = workflow.targets?.first();\nif (!target ) {\n    ui.Notificatons.warn(`${item.name} must have a token targeted`)\n    return;\n}\nconst tokenSize = token.actor.system.traits.size;\nconst targetSize = target.actor.system.traits.size;\nconst tokenSizeNum = Object.keys(CONFIG.DND5E.actorSizes).indexOf(tokenSize);\nconst targetSizeNum = Object.keys(CONFIG.DND5E.actorSizes).indexOf(targetSize); \nif (targetSizeNum - tokenSizeNum > 1) {\n    ui.notifications.warn(`${item.name} creature size difference too great ${token.name}:${CONFIG.DND5E.actorSizes[tokenSize]} vs ${target.name}:${CONFIG.DND5E.actorSizes[targetSize]}`)\n    return;\n}\nconst targetSkill = target.actor.system.skills.ath.total > target.actor.system.skills.acr.total ? \"ath\" : \"acr\";\nawait MidiQOL.contestedRoll({\n    source: {token, rollType: \"skill\", ability: \"Acrobatics\"},\n    target: {token: target, rollType: \"skill\", ability: targetSkill},\n    flavor: item.name, success: success.bind(this, token, target), displayResults: true, itemCardId: workflow.itemCardId, \n    rollOptions: {fastForward: false, chatMessage: true, rollMode: \"gmroll\"}\n});\n} catch (err) {\n    console.error(`${item.name} 11.0.7 item macro error`, err)\n}\n// A fun variant if the roll fails turn the tables and have the attacker pushed back/made prone\n/*\nawait MidiQOL.contestedRoll({\n    source: {token, rollType: \"skill\", ability: \"Acrobatics\"},\n    target: {token: target, rollType: \"skill\", ability: targetSkill},\n    flavor: item.name, success: success.bind(this, token, target), failure: success.bind(this, target, token) displayResults: true, itemCardId: workflow.itemCardId, \n    rollOptions: {fastForward: false, chatMessage: true}\n});\n*/"
        },
        "ignoreTraits": {
          "idi": false,
          "idr": false,
          "idv": false,
          "ida": false
        },
        "midiProperties": {
          "forceDialog": false,
          "confirmTargets": "default",
          "automationOnly": false,
          "identifier": ""
        }
      }
    },
    "identifier": "shove",
    "enchant": {},
    "prerequisites": {
      "level": null
    },
    "properties": []
  },
  "effects": [],
  "flags": {
    "custom-character-sheet-sections": {
      "sectionName": "Generic Actions"
    },
    "rest-recovery": {
      "data": {
        "recovery": {
          "enabled": false
        }
      }
    },
    "midi-qol": {
      "effectActivation": false,
      "onUseMacroName": "[postActiveEffects]ActivityMacro",
      "rollAttackPerTarget": "default",
      "itemCondition": "",
      "effectCondition": "",
      "reactionCondition": "",
      "AoETargetType": "any",
      "AoETargetTypeIncludeSelf": true,
      "autoTarget": "default",
      "removeAttackDamageButtons": "default",
      "otherCondition": ""
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "autoFailFriendly": false,
      "autoSaveFriendly": false,
      "rollOther": false,
      "critOther": false,
      "offHandWeapon": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false,
      "ignoreTotalCover": false,
      "confirmTargets": "never",
      "noConcentrationCheck": false,
      "idr": false,
      "idi": false,
      "idv": false,
      "ida": false
    },
    "core": {},
    "cf": {
      "id": null
    },
    "itemacro": {
      "macro": {
        "name": "Shove",
        "type": "script",
        "scope": "global",
        "command": "try {\n    async function success(sourceToken, targetToken, results) {\n    d = new Dialog({\n        title: `${item.name} ${game.i18n.localize(\"midi-qol.save-success\")}`,\n        content: \"what do you want to do?\",\n        buttons: {\n                        move: {\n                icon: '<image src=\"icons/svg/direction.svg\" width=\"30\" height=\"30\" style=\"border:0px\">',\n                label: \"Move\",\n                callback: () => {MidiQOL.moveTokenAwayFromPoint(targetToken, 5, sourceToken.center)}\n            },\n            prone: {\n                icon: '<image src=\"icons/svg/falling.svg\" width=\"30\" height=\"30\" style=\"border:0px\">',\n                label: `${game.i18n.localize(\"EFFECT.StatusProne\")}`,\n                callback: () => {\n                    if (MidiQOL.hasCondition(targetToken, \"Prone\")) return;\n                    let se = CONFIG.statusEffects.find(i => { // This will find a convenient effect\n                            if (i.statuses instanceof Set) return i.statuses.has(\"prone\");\n                            return i.statuses?.find(s => s === \"prone\")\n                        });\n                        \n                    if (!se) se = CONFIG.statusEffects.find(i => i.id === \"prone\"); // get the default status effect\n                    targetToken.toggleEffect(se, {active: true});\n                }\n            }\n\n        },\n        default: \"move\"\n    })\n    d.render(true);\n}\n\n\nif (!token) token = MidiQOL.tokenForActor(actor);\nif (!token) {\n    ui.notifications.warn(`${actor.name} does not have a token on the canvas`)\n    return;\n}\nlet target = workflow.targets?.first();\nif (!target ) {\n    ui.Notificatons.warn(`${item.name} must have a token targeted`)\n    return;\n}\nconst tokenSize = token.actor.system.traits.size;\nconst targetSize = target.actor.system.traits.size;\nconst tokenSizeNum = Object.keys(CONFIG.DND5E.actorSizes).indexOf(tokenSize);\nconst targetSizeNum = Object.keys(CONFIG.DND5E.actorSizes).indexOf(targetSize); \nif (targetSizeNum - tokenSizeNum > 1) {\n    ui.notifications.warn(`${item.name} creature size difference too great ${token.name}:${CONFIG.DND5E.actorSizes[tokenSize]} vs ${target.name}:${CONFIG.DND5E.actorSizes[targetSize]}`)\n    return;\n}\nconst targetSkill = target.actor.system.skills.ath.total > target.actor.system.skills.acr.total ? \"ath\" : \"acr\";\nawait MidiQOL.contestedRoll({\n    source: {token, rollType: \"skill\", ability: \"Acrobatics\"},\n    target: {token: target, rollType: \"skill\", ability: targetSkill},\n    flavor: item.name, success: success.bind(this, token, target), displayResults: true, itemCardId: workflow.itemCardId, \n    rollOptions: {fastForward: false, chatMessage: true, rollMode: \"gmroll\"}\n});\n} catch (err) {\n    console.error(`${item.name} 11.0.7 item macro error`, err)\n}\n// A fun variant if the roll fails turn the tables and have the attacker pushed back/made prone\n/*\nawait MidiQOL.contestedRoll({\n    source: {token, rollType: \"skill\", ability: \"Acrobatics\"},\n    target: {token: target, rollType: \"skill\", ability: targetSkill},\n    flavor: item.name, success: success.bind(this, token, target), failure: success.bind(this, target, token) displayResults: true, itemCardId: workflow.itemCardId, \n    rollOptions: {fastForward: false, chatMessage: true}\n});\n*/",
        "author": "ffUVCzLexh57kZfU",
        "_id": null,
        "img": "icons/svg/dice-target.svg",
        "folder": null,
        "sort": 0,
        "ownership": {
          "default": 0
        },
        "flags": {},
        "_stats": {
          "systemId": null,
          "systemVersion": null,
          "coreVersion": null,
          "createdTime": null,
          "modifiedTime": null,
          "lastModifiedBy": null
        }
      }
    },
    "dnd5e": {
      "persistSourceMigration": true,
      "riders": {
        "activity": [],
        "effect": []
      }
    },
    "tidy5e-sheet": {
      "section": "",
      "actionSection": ""
    }
  },
  "_stats": {
    "compendiumSource": null,
    "duplicateSource": null,
    "coreVersion": "12.331",
    "systemId": "dnd5e",
    "systemVersion": "4.1.2",
    "createdTime": 1734180116268,
    "modifiedTime": 1734180116268,
    "lastModifiedBy": "Zl1BOUaPLwDEujaL"
  },
  "folder": "tWh6UgUeg2lxQ8uJ",
  "_id": "2Iq9Gw7rGFGhXBfe",
  "sort": 200000,
  "ownership": {
    "default": 0,
    "Zl1BOUaPLwDEujaL": 3
  },
  "_key": "!items!2Iq9Gw7rGFGhXBfe"
}
