{
  "name": "Arcane Ward 10.0.10",
  "type": "feat",
  "img": "icons/magic/control/debuff-chains-ropes-net-white.webp",
  "effects": [
    {
      "_id": "8w2x8zztauaqzd1l",
      "changes": [
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "5 @abilities.int.mod",
          "priority": 20
        },
        {
          "key": "flags.midi-qol.onUseMacroName",
          "mode": 0,
          "value": "ItemMacro.Arcane Ward, postActiveEffects",
          "priority": 20
        },
        {
          "key": "flags.dae.onUpdateTarget",
          "mode": 0,
          "value": "Arcane Link, ItemMacro, data.attributes.hp.value",
          "priority": 20
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null,
        "seconds": null,
        "combat": null,
        "rounds": null,
        "turns": null,
        "startRound": null,
        "startTurn": null
      },
      "origin": "Actor.6DHUnnnzFTYHWI7I.Item.uPACrUoblqkB7daH",
      "transfer": false,
      "flags": {
        "core": {
          "statusId": "1"
        },
        "dae": {
          "stackable": "none",
          "durationExpression": "",
          "macroRepeat": "none",
          "specialDuration": [
            "longRest"
          ],
          "transfer": false,
          "selfTarget": false
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "displayTemp": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "tint": "#ffffff",
      "name": "Arcane Ward",
      "description": "",
      "statuses": [],
      "_stats": {
        "coreVersion": "12.327",
        "systemId": null,
        "systemVersion": null,
        "createdTime": null,
        "modifiedTime": null,
        "lastModifiedBy": null,
        "compendiumSource": null,
        "duplicateSource": null
      },
      "img": "icons/magic/control/debuff-chains-ropes-net-white.webp",
      "type": "base",
      "system": {},
      "sort": 0,
      "_key": "!items.effects!xoBdakNhFVVcf9Ah.8w2x8zztauaqzd1l"
    }
  ],
  "flags": {
    "scene-packer": {
      "hash": "80d6be81dd4c0691b6d36680e1c5f0ed721c3545",
      "sourceId": "Item.0XicSu4akbJr3Fyu"
    },
    "midi-qol": {
      "effectActivation": false,
      "rollAttackPerTarget": "default",
      "itemCondition": "",
      "effectCondition": ""
    },
    "midiProperties": {
      "nodam": false,
      "fulldam": false,
      "halfdam": false,
      "rollOther": false,
      "critOther": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "toggleEffect": false,
      "selfEffect": false,
      "autoFailFriendly": false,
      "autoSaveFriendly": false,
      "offHandWeapon": false,
      "ignoreTotalCover": false,
      "confirmTargets": "default",
      "noConcentrationCheck": false
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Arcane Ward",
          "type": "script",
          "author": "devnIbfBHb74U9Zv",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const wardFlagName = \"Arcane Ward Details\";\nasync function updateActorResource(actor, wardStrength, wardStrengthMax) {\n\tlet {wardStrengthField, wardStrengthMaxField} = getWardFieldNames(actor);\n\tif (!wardStrengthField || !wardStrengthMaxField) return;\n\tactorUpdate = {};\n\tactorUpdate[wardStrengthField] = wardStrength;\n\tactorUpdate[wardStrengthMaxField] = wardStrengthMax;\n\tawait actor.update(actorUpdate)\n}\nasync function setWardFieldNames(item) {\n\tconst consumeTargetField = `data.${item.data.data.consume.target ?? \"\"}`;\n\tconst maxField = consumeTargetField.replace(\".value\", \".max\");\n\titem.parent.setFlag(\"midi-qol\", wardFlagName, {\n\t\twardStrengthField: consumeTargetField,\n\t\twardStrengthMaxField: maxField\n\t})\n}\nfunction getWardFieldNames(actor) {\n\treturn actor.getFlag(\"midi-qol\", wardFlagName) ?? {wardStrengthField: undefined, wardStrengthMaxField: undefined};\n}\nfunction getWardValue(actor) {\n\tconst {wardStrengthField, wardStrengthMaxField} = getWardFieldNames(actor);\n\tif (!wardStrengthField || !wardStrengthMaxField) \n\t\treturn {wardStrengthField: undefined, wardStrengthMaxField: undefined};\n\treturn {\n\t\twardStrength: getProperty(item.parent.data, wardStrengthField),\n\t\twardStrengthMax: getProperty(item.parent.data, wardStrengthMaxField)\n\t}\n}\n\nif (args[0] === \"on\") {\n\tconst lastArg = args[args.length - 1];\n\tconst item = await fromUuid(lastArg.origin);\n\tconst actor = item.parent;\n\tconst wardStrengthMax = args[1] * 2 + args[2];\n\tif (Number(args[1]) === 0 && Number(args[2]) === 0) return;\n\tconst speaker = ChatMessage.getSpeaker({ actor });\n\tChatMessage.create({ content: `${item.name} strength ${wardStrengthMax} created`, speaker });\n\tawait setWardFieldNames(item);\n\tawait updateActorResource(item.actor, wardStrengthMax, wardStrengthMax);\n} else if (args[0] === \"off\") {\n\tconst lastArg = args[args.length - 1];\n\tconst item = await fromUuid(lastArg.origin);\n\tconst actor = await fromUuid(lastArg.actorUuid);\n\tconst speaker = ChatMessage.getSpeaker({ actor });\n\tChatMessage.create({ content: `${item.name} dismissed`, speaker });\n\tawait updateActorResource(item.actor, 0, 0);\n\titem.actor.unsetFlag(\"midi-qol\", wardFlagName)\n} else if (\n\targs[0].macroPass === \"postActiveEffects\" &&\n\targs[0].itemData?.data.school === \"abj\" &&\n\targs[0].itemData?.data.level > 0) {\n\tlet { wardStrength, wardStrengthMax } = getWardValue(actor);\n\tif (wardStrengthMax === undefined) return;\n\tlet newWardStrength = Math.min(wardStrength + args[0].spellLevel * 2, wardStrengthMax);\n\tconst speaker = ChatMessage.getSpeaker({ actor });\n\tChatMessage.create({\n\t\tcontent: `${args[0].itemData.name} gains ${args[0].spellLevel * 2} points to ${newWardStrength}/${wardStrengthMax}`,\n\t\tspeaker,\n\t});\n\tif (wardStrength !== newWardStrength) {\n\t\tupdateActorResource(actor, newWardStrength, wardStrengthMax);\n\t}\n} else if (args[0] === \"onUpdateActor\") {\n\tconst lastArg = args[args.length - 1];\n\tlet newHP = getProperty(lastArg.updates, \"data.attributes.hp.value\");\n\tlet oldHP = lastArg.targetActor.data.data.attributes.hp.value;\n\tif (newHP && oldHP && newHP < oldHP) {\n\t\tconst damage = oldHP - newHP;\n\t\tconst {wardStrengthField, wardStrengthMaxField} = getWardFieldNames(lastArg.sourceActor);\n\t\tif (!wardStrengthField) return;\n\t\tlet { wardStrengthMax, wardStrength } = getWardValue(actor);\n\t\tif (wardStrengthMax === undefined) return;\n\t\tconst absorbed = Math.min(damage, wardStrength ?? 0);\n\t\tif (absorbed) {\n\t\t\tnewHP = newHP + absorbed;\n\t\t\tconst speaker = ChatMessage.getSpeaker({ actor: lastArg.targetActor });\n\t\t\tChatMessage.create({\n\t\t\t\tcontent: `${lastArg.originItem.name} absorbs ${absorbed} of ${damage} points of damage.<br> Hp -> ${newHP}<br>Wardstength -> ${wardStrength - absorbed}`,\n\t\t\t\tspeaker\n\t\t\t});\n\t\t\tlastArg.updates.data.attributes.hp.value = newHP;\n\t\t\tif (wardStrengthField !== \"\") { // assume the target is a resource\n\t\t\t\tsetProperty(lastArg.updates, wardStrengthField, wardStrength - absorbed );\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        },
        "name": "Arcane Ward 10.0.10",
        "type": "script",
        "img": "icons/svg/dice-target.svg",
        "scope": "global",
        "command": "const version = \"10.0.10\";\ntry {\n\tconst wardFlagName = \"Arcane Ward Details\";\n\tasync function updateActorResource(actor, wardStrength, wardStrengthMax) {\n\t\tlet {wardStrengthField, wardStrengthMaxField} = getWardFieldNames(actor);\n\t\tif (!wardStrengthField || !wardStrengthMaxField) return;\n\t\tactorUpdate = {};\n\t\tactorUpdate[wardStrengthField] = wardStrength;\n\t\tactorUpdate[wardStrengthMaxField] = wardStrengthMax;\n\t\tconsole.error(\"update actor resource \", actorUpdate)\n\t\tawait actor.update(actorUpdate)\n\t}\n\tasync function setWardFieldNames(item) {\n\t\tconst consumeTargetField = `system.${item.system.consume.target ?? \"\"}`;\n\t\tconsole.error(\"consume target is \", consumeTargetField)\n\t\tconst maxField = consumeTargetField.replace(\".value\", \".max\");\n\t\tawait item.parent.setFlag(\"midi-qol\", wardFlagName, {\n\t\t\twardStrengthField: consumeTargetField,\n\t\t\twardStrengthMaxField: maxField\n\t\t})\n\t}\n\tfunction getWardFieldNames(actor) {\n\t\treturn actor.getFlag(\"midi-qol\", wardFlagName) ?? {wardStrengthField: undefined, wardStrengthMaxField: undefined};\n\t}\n\tfunction getWardValue(actor) {\n\t\tconst {wardStrengthField, wardStrengthMaxField} = getWardFieldNames(actor);\n\t\tif (!wardStrengthField || !wardStrengthMaxField) \n\t\t\treturn {wardStrengthField: undefined, wardStrengthMaxField: undefined};\n\t\treturn {\n\t\t\twardStrength: getProperty(item.parent, wardStrengthField),\n\t\t\twardStrengthMax: getProperty(item.parent, wardStrengthMaxField)\n\t\t}\n\t}\n\n\tif (args[0] === \"on\") {\n\t\tconst lastArg = args[args.length - 1];\n\t\tconst item = await fromUuid(lastArg.origin);\n\t\tconst actor = item.parent;\n\t\tconst wardStrengthMax = args[1] * 2 + args[2];\n\t\tif (Number(args[1]) === 0 && Number(args[2]) === 0) return;\n\t\tconst speaker = ChatMessage.getSpeaker({ actor });\n\t\tChatMessage.create({ content: `${item.name} strength ${wardStrengthMax} created`, speaker });\n\t\tawait setWardFieldNames(item);\n\t\tawait updateActorResource(item.actor, wardStrengthMax, wardStrengthMax);\n\t} else if (args[0] === \"off\") {\n\t\tconst lastArg = args[args.length - 1];\n\t\tconst item = await fromUuid(lastArg.origin);\n\t\tconst actor = await fromUuid(lastArg.actorUuid);\n\t\tconst speaker = ChatMessage.getSpeaker({ actor });\n\t\tChatMessage.create({ content: `${item.name} dismissed`, speaker });\n\t\tawait updateActorResource(item.actor, 0, 0);\n\t\titem.actor.unsetFlag(\"midi-qol\", wardFlagName)\n\t} else if (\n\t\targs[0].macroPass === \"postActiveEffects\" &&\n\t\targs[0].itemData?.system.school === \"abj\" &&\n\t\targs[0].itemData?.system.level > 0) {\n\t\tlet { wardStrength, wardStrengthMax } = getWardValue(actor);\n\t\tif (wardStrengthMax === undefined) return;\n\t\tlet newWardStrength = Math.min(wardStrength + args[0].spellLevel * 2, wardStrengthMax);\n\t\tconst speaker = ChatMessage.getSpeaker({ actor });\n\t\tChatMessage.create({\n\t\t\tcontent: `${args[0].itemData.name} gains ${args[0].spellLevel * 2} points to ${newWardStrength}/${wardStrengthMax}`,\n\t\t\tspeaker,\n\t\t});\n\t\tif (wardStrength !== newWardStrength) {\n\t\t\tupdateActorResource(actor, newWardStrength, wardStrengthMax);\n\t\t}\n\t} else if (args[0] === \"onUpdateActor\") {\n\t\tconst lastArg = args[args.length - 1];\n\t\tlet newHP = getProperty(lastArg.updates, \"system.attributes.hp.value\");\n\t\tlet oldHP = lastArg.targetActor.system.attributes.hp.value;\n\t\tif (newHP && oldHP && newHP < oldHP) {\n\t\t\tconst damage = oldHP - newHP;\n\t\t\tconst {wardStrengthField, wardStrengthMaxField} = getWardFieldNames(lastArg.sourceActor);\n\t\t\tif (!wardStrengthField) return;\n\t\t\tlet { wardStrengthMax, wardStrength } = getWardValue(actor);\n\t\t\tif (wardStrengthMax === undefined) return;\n\t\t\tconst absorbed = Math.min(damage, wardStrength ?? 0);\n\t\t\tif (absorbed) {\n\t\t\t\tnewHP = newHP + absorbed;\n\t\t\t\tconst speaker = ChatMessage.getSpeaker({ actor: lastArg.targetActor });\n\t\t\t\tChatMessage.create({\n\t\t\t\t\tcontent: `${lastArg.originItem.name} absorbs ${absorbed} of ${damage} points of damage.<br> Hp -> ${newHP}<br>Wardstength -> ${wardStrength - absorbed}`,\n\t\t\t\t\tspeaker\n\t\t\t\t});\n\t\t\t\tlastArg.updates.system.attributes.hp.value = newHP;\n\t\t\t\tif (wardStrengthField !== \"\") { // assume the target is a resource\n\t\t\t\t\tsetProperty(lastArg.updates, wardStrengthField, wardStrength - absorbed );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n} catch (err) {\n    console.error(`Arcane Ward ${version}`, err);\n}",
        "sort": 0,
        "ownership": {
          "default": 0
        },
        "flags": {},
        "_stats": {
          "systemId": null,
          "systemVersion": null,
          "coreVersion": null,
          "createdTime": null,
          "modifiedTime": null,
          "lastModifiedBy": null
        }
      }
    },
    "core": {
      "sourceId": "Item.uPACrUoblqkB7daH"
    },
    "cf": {
      "id": "temp_qt0kn9os0vl"
    },
    "exportSource": {
      "world": "testWorld16",
      "system": "dnd5e",
      "coreVersion": "9.269",
      "systemVersion": "1.6.3"
    },
    "spellTemplateManager": {
      "stmData": {
        "ignoreDuration": false,
        "spellTexture": "",
        "useTexture": false,
        "alpha": 50,
        "coneOrigin": 1,
        "loopAnimations": true
      }
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    }
  },
  "system": {
    "description": {
      "value": "<p>Starting at 2nd level, you can weave magic around yourself for protection. When you cast an abjuration spell of 1st level or higher, you can simultaneously use a strand of the spell's magic to create a magical ward on yourself that lasts until you finish a long rest. The ward has hit points equal to twice your wizard level + your Intelligence modifier. Whenever you take damage, the ward takes the damage instead. If this damage reduces the ward to 0 hit points, you take any remaining damage.</p><p>While the ward has 0 hit points, it can't absorb damage, but its magic remains. Whenever you cast an abjuration spell of 1st level or higher, the ward regains a number of hit points equal to twice the level of the spell.</p><p>Once you create the ward, you can't create it again until you finish a long rest.</p><p> </p><p>Midi-qol: This version does not use temphp so should sit comforatbly with other tiems that use temphp.<br /><strong>You must rename the feature to Arcane Ward when it is equipped on the actor</strong></p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "special",
      "cost": 0,
      "condition": ""
    },
    "duration": {
      "value": "",
      "units": ""
    },
    "cover": null,
    "crewed": false,
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": ""
    },
    "uses": {
      "value": 0,
      "max": "1",
      "per": "lr",
      "recovery": ""
    },
    "consume": {
      "type": "attribute",
      "target": "",
      "amount": 0
    },
    "ability": "",
    "actionType": "other",
    "attackBonus": "",
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": ""
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "type": {
      "value": "",
      "subtype": ""
    },
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": false
    }
  },
  "_stats": {
    "systemId": "dnd5e",
    "systemVersion": "3.2.1",
    "coreVersion": "12.327",
    "createdTime": 1659935114891,
    "modifiedTime": 1719452610248,
    "lastModifiedBy": "STcmc1QZ0hx024Tl",
    "compendiumSource": "Item.uPACrUoblqkB7daH",
    "duplicateSource": null
  },
  "folder": "HZNnxQwiyl5E1X6W",
  "sort": 906250,
  "ownership": {
    "default": 0,
    "devnIbfBHb74U9Zv": 3,
    "ffUVCzLexh57kZfU": 3
  },
  "_id": "xoBdakNhFVVcf9Ah",
  "_key": "!items!xoBdakNhFVVcf9Ah"
}
