{
  "name": "Sneak Attack v4",
  "type": "feat",
  "img": "icons/skills/melee/strike-dagger-arcane-pink.webp",
  "effects": [
    {
      "_id": "Ns5pHr7gcYPTJ7HU",
      "flags": {
        "dae": {
          "stackable": "none",
          "transfer": true,
          "specialDuration": [],
          "macroRepeat": "none",
          "selfTarget": false,
          "selfTargetAlways": false,
          "durationExpression": ""
        },
        "ActiveAuras": {
          "isAura": false,
          "ignoreSelf": false,
          "hidden": false,
          "height": false,
          "aura": "None",
          "radius": "null",
          "alignment": "",
          "type": "",
          "save": "",
          "savedc": null,
          "displayTemp": false,
          "hostile": false,
          "onlyOnce": false
        },
        "core": {
          "statusId": ""
        },
        "dfreds-convenient-effects": {
          "description": ""
        }
      },
      "changes": [
        {
          "key": "flags.dnd5e.DamageBonusMacro",
          "mode": 0,
          "value": "ItemMacro",
          "priority": 30
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": 47178633739,
        "seconds": null,
        "combat": null,
        "rounds": null,
        "turns": null,
        "startRound": 53,
        "startTurn": 1
      },
      "origin": "Actor.BogmFuNh1wswTouJ.Item.HKJhP9F7MCq6oMx1",
      "tint": "#ffffff",
      "transfer": true,
      "name": "Sneak Attack",
      "description": "",
      "statuses": [],
      "_stats": {
        "compendiumSource": null,
        "duplicateSource": null,
        "coreVersion": "12.331",
        "systemId": "dnd5e",
        "systemVersion": "4.1.1",
        "createdTime": null,
        "modifiedTime": null,
        "lastModifiedBy": null
      },
      "img": "icons/skills/melee/strike-dagger-arcane-pink.webp",
      "type": "base",
      "system": {},
      "sort": 0,
      "_key": "!items.effects!jkAYvxeezWkh1Oij.Ns5pHr7gcYPTJ7HU"
    }
  ],
  "flags": {
    "dae": {
      "activeEquipped": false,
      "alwaysActive": false,
      "macro": {
        "name": "Sneak Attack v4",
        "img": "icons/skills/melee/strike-dagger-arcane-pink.webp",
        "type": "script",
        "scope": "global",
        "command": "const version = \"12.4.4\"\ntry {\n    if (![\"mwak\",\"rwak\"].includes(workflow.activity.actionType)) return {}; // weapon attack\n    if (workflow.activity.actionType === \"mwak\" && !rolledItem?.system.properties?.has(\"fin\")) \n      return {}; // ranged or finesse\n    if (workflow.hitTargets.size < 1) return {};\n    if (!actor || !token || workflow.hitTargets.size < 1) return {};\n    const rogueLevels = actor.getRollData().classes.rogue?.levels;\n    if (!rogueLevels) {\n      MidiQOL.warn(\"Sneak Attack Damage: Trying to do sneak attack and not a rogue\");\n      return {}; // rogue only\n    }\n    let target = workflow.hitTargets.first();\n    if (!target) MidiQOL.error(\"Sneak attack macro failed\");\n    \n    if (game.combat) {\n      const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn /100}`;\n      const lastTime = actor.getFlag(\"midi-qol\", \"sneakAttackTime\");\n      if (combatTime === lastTime) {\n       MidiQOL.warn(\"Sneak Attack Damage: Already done a sneak attack this turn\");\n       return {};\n      }\n    }\n    let foundEnemy = true;\n    let isSneak = args[0].advantage;\n    \n    if (!isSneak) {\n      foundEnemy = false;\n      let nearbyEnemy = canvas.tokens.placeables.filter(t => {\n        let nearby = (t.actor &&\n             t.actor?.id !== args[0].actor._id && // not me\n             t.id !== target.id && // not the target\n             t.actor?.system.attributes?.hp?.value > 0 && // not incapacitated\n             t.document.disposition !== target.document.disposition && // not an ally\n             MidiQOL.computeDistance(t, target, {wallsBlock: false}) <= 5 // close to the target\n         );\n        foundEnemy = foundEnemy || (nearby && t.document.disposition === -target.document.disposition)\n        return nearby;\n      });\n      isSneak = nearbyEnemy.length > 0;\n    }\n    if (!isSneak) {\n      MidiQOL.warn(\"Sneak Attack Damage: No advantage/ally next to target\");\n      return {};\n    }\n    let useSneak = foundry.utils.getProperty(actor, \"flags.dae.autoSneak\");\n    if (!useSneak) {\n        let dialog = new Promise((resolve, reject) => {\n          new Dialog({\n          // localize this text\n          title: \"Conditional Damage\",\n          content: `<p>Use Sneak attack?</p>`+(!foundEnemy ? \"<p>Only Nuetral creatures nearby</p>\" : \"\"),\n          buttons: {\n              confirm: {\n                  icon: '<i class=\"fas fa-check\"></i>',\n                  label: \"Confirm\",\n                  callback: () => resolve(true)\n              },\n              cancel: {\n                  icon: '<i class=\"fas fa-times\"></i>',\n                  label: \"Cancel\",\n                  callback: () => {resolve(false)}\n              }\n          },\n          default: \"confirm\"\n          }).render(true);\n        });\n        useSneak = await dialog;\n    }\n    if (!useSneak) return {}\n    if (game.combat) {\n      const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn /100}`;\n      const lastTime = actor.getFlag(\"midi-qol\", \"sneakAttackTime\");\n      if (combatTime !== lastTime) {\n         await actor.setFlag(\"midi-qol\", \"sneakAttackTime\", combatTime)\n      }\n    }\n    const sneakActivity = macroItem.system.activities?.contents[0];\n    if (!sneakActivity) {\n      console.error(\"no activity\");\n      return {};\n    }\n   let damageRolls = await sneakActivity.rollDamage({midiOptions: {isCritical: workflow.isCritical}}, {configure: false}, {create: false});\n   for (let damageRoll of damageRolls)\n    damageRoll.options.flavor = sneakActivity.name;\n    return damageRolls;\n} catch (err) {\n    console.error(`${args[0].itemData.name} - Sneak Attack ${version}`, err);\n}",
        "author": "Zl1BOUaPLwDEujaL",
        "ownership": {
          "default": 3
        },
        "_id": null,
        "folder": null,
        "sort": 0,
        "flags": {},
        "_stats": {
          "systemId": "dnd5e",
          "systemVersion": "4.0.4",
          "coreVersion": "12.331",
          "createdTime": null,
          "modifiedTime": null,
          "lastModifiedBy": null,
          "compendiumSource": null,
          "duplicateSource": null
        }
      }
    },
    "exportSource": {
      "world": "storm-kings-thunder",
      "system": "dnd5e",
      "coreVersion": "0.7.9",
      "systemVersion": "1.2.3"
    },
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Sneak Attack",
          "type": "script",
          "author": "devnIbfBHb74U9Zv",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "const version = \"0.9.52\"\ntry {\n    if (![\"mwak\",\"rwak\"].includes(args[0].itemData.data.actionType)) return {}; // weapon attack\n    if (args[0].itemData.data.actionType === \"mwak\" && !args[0].itemData.data.properties?.fin) \n      return {}; // ranged or finesse\n    if (args[0].hitTargets.length < 1) return {};\n    token = canvas.tokens.get(args[0].tokenId);\n    actor = token.actor;\n    if (!actor || !token || args[0].hitTargets.length < 1) return {};\n    const rogueLevels = actor.getRollData().classes.rogue?.levels;\n    if (!rogueLevels) {\n      MidiQOL.warn(\"Sneak Attack Damage: Trying to do sneak attack and not a rogue\");\n      return {}; // rogue only\n    }\n    let target = canvas.tokens.get(args[0].hitTargets[0].id ?? args[0].hitTargers[0]._id);\n    if (!target) MidiQOL.error(\"Sneak attack macro failed\");\n    \n    if (game.combat) {\n      const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn /100}`;\n      const lastTime = actor.getFlag(\"midi-qol\", \"sneakAttackTime\");\n      if (combatTime === lastTime) {\n       MidiQOL.warn(\"Sneak Attack Damage: Already done a sneak attack this turn\");\n       return {};\n      }\n    }\n    let foundEnemy = true;\n    let isSneak = args[0].advantage;\n    \n    if (!isSneak) {\n      foundEnemy = false;\n      let nearbyEnemy = canvas.tokens.placeables.filter(t => {\n        let nearby = (t.actor &&\n             t.actor?.id !== args[0].actor._id && // not me\n             t.id !== target.id && // not the target\n             t.actor?.data.data.attributes?.hp?.value > 0 && // not incapacitated\n             t.data.disposition !== target.data.disposition && // not an ally\n             MidiQOL.getDistance(t, target, false) <= 5 // close to the target\n         );\n        foundEnemy = foundEnemy || (nearby && t.data.disposition === -target.data.disposition)\n        return nearby;\n      });\n      isSneak = nearbyEnemy.length > 0;\n    }\n    if (!isSneak) {\n      MidiQOL.warn(\"Sneak Attack Damage: No advantage/ally next to target\");\n      return {};\n    }\n    let useSneak = getProperty(actor.data, \"flags.dae.autoSneak\");\n    if (!useSneak) {\n        let dialog = new Promise((resolve, reject) => {\n          new Dialog({\n          // localize this text\n          title: \"Conditional Damage\",\n          content: `<p>Use Sneak attack?</p>`+(!foundEnemy ? \"<p>Only Nuetral creatures nearby</p>\" : \"\"),\n          buttons: {\n              one: {\n                  icon: '<i class=\"fas fa-check\"></i>',\n                  label: \"Confirm\",\n                  callback: () => resolve(true)\n              },\n              two: {\n                  icon: '<i class=\"fas fa-times\"></i>',\n                  label: \"Cancel\",\n                  callback: () => {resolve(false)}\n              }\n          },\n          default: \"two\"\n          }).render(true);\n        });\n        useSneak = await dialog;\n    }\n    if (!useSneak) return {}\n    const diceMult = args[0].isCritical ? 2: 1;\n    const baseDice = Math.ceil(rogueLevels/2);\n    if (game.combat) {\n      const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn /100}`;\n      const lastTime = actor.getFlag(\"midi-qol\", \"sneakAttackTime\");\n      if (combatTime !== lastTime) {\n         await actor.setFlag(\"midi-qol\", \"sneakAttackTime\", combatTime)\n      }\n    }\n    // How to check that we've already done one this turn?\n    return {damageRoll: `${baseDice * diceMult}d6`, flavor: \"Sneak Attack\"};\n} catch (err) {\n    console.error(`${args[0].itemData.name} - Sneak Attack ${version}`, err);\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        },
        "name": "Sneak Attack 11.4.9",
        "type": "script",
        "img": "icons/skills/melee/strike-dagger-arcane-pink.webp",
        "scope": "global",
        "command": "const version = \"10.0.33\"\ntry {\n    if (![\"mwak\",\"rwak\"].includes(args[0].itemData.system.actionType)) return {}; // weapon attack\n    if (args[0].itemData.system.actionType === \"mwak\" && !rolledItem?.system.properties?.has(\"fin\")) \n      return {}; // ranged or finesse\n    if (args[0].hitTargets.length < 1) return {};\n    token = canvas.tokens.get(args[0].tokenId);\n    actor = token.actor;\n    if (!actor || !token || args[0].hitTargets.length < 1) return {};\n    const rogueLevels = actor.getRollData().classes.rogue?.levels;\n    if (!rogueLevels) {\n      MidiQOL.warn(\"Sneak Attack Damage: Trying to do sneak attack and not a rogue\");\n      return {}; // rogue only\n    }\n    let target = canvas.tokens.get(args[0].hitTargets[0].id ?? args[0].hitTargers[0]._id);\n    if (!target) MidiQOL.error(\"Sneak attack macro failed\");\n    \n    if (game.combat) {\n      const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn /100}`;\n      const lastTime = actor.getFlag(\"midi-qol\", \"sneakAttackTime\");\n      if (combatTime === lastTime) {\n       MidiQOL.warn(\"Sneak Attack Damage: Already done a sneak attack this turn\");\n       return {};\n      }\n    }\n    let foundEnemy = true;\n    let isSneak = args[0].advantage;\n    \n    if (!isSneak) {\n      foundEnemy = false;\n      let nearbyEnemy = canvas.tokens.placeables.filter(t => {\n        let nearby = (t.actor &&\n             t.actor?.id !== args[0].actor._id && // not me\n             t.id !== target.id && // not the target\n             t.actor?.system.attributes?.hp?.value > 0 && // not incapacitated\n             t.document.disposition !== target.document.disposition && // not an ally\n             MidiQOL.getDistance(t, target, false) <= 5 // close to the target\n         );\n        foundEnemy = foundEnemy || (nearby && t.document.disposition === -target.document.disposition)\n        return nearby;\n      });\n      isSneak = nearbyEnemy.length > 0;\n    }\n    if (!isSneak) {\n      MidiQOL.warn(\"Sneak Attack Damage: No advantage/ally next to target\");\n      return {};\n    }\n    let useSneak = getProperty(actor, \"flags.dae.autoSneak\");\n    if (!useSneak) {\n        let dialog = new Promise((resolve, reject) => {\n          new Dialog({\n          // localize this text\n          title: \"Conditional Damage\",\n          content: `<p>Use Sneak attack?</p>`+(!foundEnemy ? \"<p>Only Nuetral creatures nearby</p>\" : \"\"),\n          buttons: {\n              one: {\n                  icon: '<i class=\"fas fa-check\"></i>',\n                  label: \"Confirm\",\n                  callback: () => resolve(true)\n              },\n              two: {\n                  icon: '<i class=\"fas fa-times\"></i>',\n                  label: \"Cancel\",\n                  callback: () => {resolve(false)}\n              }\n          },\n          default: \"two\"\n          }).render(true);\n        });\n        useSneak = await dialog;\n    }\n    if (!useSneak) return {}\n    const baseDice = Math.ceil(rogueLevels/2);\n    if (game.combat) {\n      const combatTime = `${game.combat.id}-${game.combat.round + game.combat.turn /100}`;\n      const lastTime = actor.getFlag(\"midi-qol\", \"sneakAttackTime\");\n      if (combatTime !== lastTime) {\n         await actor.setFlag(\"midi-qol\", \"sneakAttackTime\", combatTime)\n      }\n    }\n    const damageFormula = new CONFIG.Dice.DamageRoll(`${baseDice}d6`, {}, {\n        critical: args[0].isCritical ?? false, \n        powerfulCritical: game.settings.get(\"dnd5e\", \"criticalDamageMaxDice\"),\n        multiplyNumeric: game.settings.get(\"dnd5e\",  \"criticalDamageModifiers\")\n    }).formula\n    // How to check that we've already done one this turn?\n    return {damageRoll: damageFormula, flavor: \"Sneak Attack\"};\n} catch (err) {\n    console.error(`${args[0].itemData.name} - Sneak Attack ${version}`, err);\n}",
        "sort": 0,
        "ownership": {
          "default": 3
        },
        "flags": {},
        "_stats": {
          "systemId": null,
          "systemVersion": null,
          "coreVersion": null,
          "createdTime": null,
          "modifiedTime": null,
          "lastModifiedBy": null
        },
        "author": "STcmc1QZ0hx024Tl",
        "_id": null,
        "folder": null
      }
    },
    "betterRolls5e": {
      "critRange": {
        "value": null
      },
      "critDamage": {
        "value": ""
      },
      "quickDesc": {
        "value": true,
        "altValue": true
      },
      "quickProperties": {
        "value": true,
        "altValue": true
      },
      "quickOther": {
        "value": true,
        "altValue": true
      },
      "quickFlavor": {
        "value": true,
        "altValue": true
      }
    },
    "core": {
      "sourceId": "Item.bhuz5hzr0YsHJd1N"
    },
    "favtab": {
      "isFavorite": false
    },
    "autoanimations": {
      "killAnim": false,
      "override": false,
      "animType": "t1",
      "animName": "",
      "hmAnim": "a1",
      "color": "a1",
      "dtvar": "dt1",
      "explosion": false,
      "explodeVariant": "ev1",
      "explodeColor": "",
      "explodeRadius": "0",
      "explodeLoop": "1",
      "selfRadius": "5",
      "animTint": "#ffffff",
      "auraOpacity": 0.75,
      "ctaOption": false,
      "animLevel": false,
      "bards": {
        "bardAnim": "a1",
        "bardTarget": true,
        "bardTargetAnim": "a1",
        "bardTargetColor": "a1",
        "bardSelf": true,
        "marker": true,
        "markerColor": "a1",
        "markerColorTarget": "a1"
      },
      "spellVar": "a1",
      "rangedOptions": {
        "rangeDmgType": ""
      },
      "spellOptions": {
        "spellLoops": 1
      },
      "uaStrikeType": "physical",
      "divineSmite": {
        "dsEnable": false,
        "dsSelf": true,
        "dsSelfDelay": 0,
        "dsSelfColor": "a1",
        "dsTarget": true,
        "dsTargetDelay": 1250,
        "dsTargetColor": "a1"
      },
      "exAnimLevel": false,
      "impactVar": "a1",
      "allSounds": {
        "explosion": {
          "audioExplodeEnabled": false,
          "file": "",
          "delay": 100,
          "volume": 0.25
        },
        "item": {
          "enableAudio": false,
          "file": "",
          "delay": 100,
          "volume": 0.25
        }
      },
      "teleDist": 30,
      "templates": {
        "tempType": "a1",
        "tempAnim": "",
        "tempColor": "",
        "tempLoop": 1,
        "customAnim": false,
        "customPath": ""
      }
    },
    "cf": {
      "id": "temp_qt0kn9os0vl",
      "color": "#000000"
    },
    "scene-packer": {
      "hash": "b87df3384f4567d938ae30822247b7c8c953d1e9",
      "sourceId": "Item.iAT8vbZBlneM2wEG"
    },
    "midiProperties": {
      "confirmTargets": "default",
      "autoFailFriendly": false,
      "autoSaveFriendly": false,
      "critOther": false,
      "offHandWeapon": false,
      "magicdam": false,
      "magiceffect": false,
      "concentration": false,
      "noConcentrationCheck": false,
      "toggleEffect": false,
      "ignoreTotalCover": false,
      "idr": false,
      "idi": false,
      "idv": false,
      "ida": false
    },
    "midi-qol": {
      "rollAttackPerTarget": "default",
      "effectActivation": false,
      "itemCondition": "",
      "effectCondition": "",
      "reactionCondition": "",
      "removeAttackDamageButtons": "default",
      "otherCondition": ""
    },
    "walledtemplates": {
      "wallsBlock": "globalDefault",
      "wallRestriction": "globalDefault",
      "hideBorder": "globalDefault",
      "hideHighlighting": "globalDefault",
      "showOnHover": "globalDefault",
      "noAutotarget": false,
      "addTokenSize": false,
      "attachToken": "na"
    },
    "dnd5e": {
      "riders": {
        "activity": [],
        "effect": []
      }
    },
    "tidy5e-sheet": {
      "section": "",
      "actionSection": ""
    }
  },
  "system": {
    "description": {
      "value": "<p>Beginning at 1st level, you know how to strike subtly and exploit a foe's distraction. Once per turn, you can deal an extra [[/r 1d6]] damage to one creature you hit with an attack if you have advantage on the attack roll. The attack must use a finesse or a ranged weapon. </p><p>You don't need advantage on the attack roll if another enemy of the target is within 5 feet of it, that enemy isn't <a href=\"https://5e.tools/conditionsdiseases.html#incapacitated_phb\">incapacitated</a>, and you don't have disadvantage on the attack roll.</p><p>The amount of the extra damage increases as you gain levels in this class, as shown in the Sneak Attack column of the Rogue table.</p>",
      "chat": ""
    },
    "source": {
      "custom": "PHB",
      "revision": 1,
      "rules": "2014"
    },
    "uses": {
      "max": "",
      "recovery": [],
      "spent": 0
    },
    "type": {
      "value": "",
      "subtype": ""
    },
    "requirements": "Rogue 1",
    "prerequisites": {
      "level": null
    },
    "properties": [],
    "activities": {
      "zZ5axenz7HzbgWlS": {
        "type": "damage",
        "activation": {
          "type": "",
          "value": null,
          "condition": "",
          "override": false
        },
        "consumption": {
          "targets": [],
          "scaling": {
            "allowed": false,
            "max": ""
          },
          "spellSlot": true
        },
        "description": {
          "chatFlavor": ""
        },
        "duration": {
          "concentration": false,
          "value": "",
          "units": "inst",
          "special": "",
          "override": false
        },
        "effects": [],
        "range": {
          "units": "self",
          "special": "",
          "override": false
        },
        "target": {
          "template": {
            "count": "",
            "contiguous": false,
            "type": "",
            "size": "",
            "width": "",
            "height": "",
            "units": ""
          },
          "affects": {
            "count": "",
            "type": "",
            "choice": false,
            "special": ""
          },
          "prompt": true,
          "override": false
        },
        "damage": {
          "critical": {
            "allow": true,
            "bonus": ""
          },
          "parts": [
            {
              "custom": {
                "enabled": true,
                "formula": "@scale.rogue.sneak-attack"
              },
              "number": null,
              "denomination": null,
              "bonus": "",
              "types": [],
              "scaling": {
                "number": 1
              }
            }
          ]
        },
        "uses": {
          "spent": 0,
          "recovery": [],
          "max": ""
        },
        "sort": 0,
        "useConditionText": "",
        "forceDialog": false,
        "effectConditionText": "",
        "_id": "zZ5axenz7HzbgWlS",
        "name": "Sneak Attack Damage"
      }
    },
    "identifier": "sneak-attack-11613",
    "enchant": {}
  },
  "_stats": {
    "compendiumSource": "Item.bhuz5hzr0YsHJd1N",
    "duplicateSource": null,
    "coreVersion": "12.331",
    "systemId": "dnd5e",
    "systemVersion": "4.1.1",
    "createdTime": 1731498472799,
    "modifiedTime": 1731498472799,
    "lastModifiedBy": "Zl1BOUaPLwDEujaL"
  },
  "folder": "fZIl4G4qj3C894LI",
  "_id": "jkAYvxeezWkh1Oij",
  "sort": 0,
  "ownership": {
    "default": 0,
    "Zl1BOUaPLwDEujaL": 3
  },
  "_key": "!items!jkAYvxeezWkh1Oij"
}
